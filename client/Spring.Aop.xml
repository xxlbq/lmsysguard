<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Aop</name>
    </assembly>
    <members>
        <member name="T:Spring.Aop.Advice.CacheAdvice">
            <summary>
            Abstract base class for caching advice.
            </summary>
            <remarks>
            <p>
            This class should be extended by specific caching advice implementations 
            in order to define where cached objects should be stored.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:AopAlliance.Intercept.IMethodInterceptor">
            <summary>
            Intercepts calls on an interface on its way to the target.
            </summary>
            <remarks>
            <p>
            Such interceptions are nested "on top" of the target.
            </p>
            </remarks>
        </member>
        <member name="T:AopAlliance.Intercept.IInterceptor">
            <summary>
            Represents a generic interceptor.
            </summary>
            <remarks>
            <p>
            A generic interceptor can intercept runtime events that occur within a
            base program. Those events are materialized by (reified in) joinpoints.
            Runtime joinpoints can be invocations, field access, exceptions, etc.
            </p>
            <p>
            This interface is not used directly. Use the various derived interfaces
            to intercept specific events.
            </p>
            </remarks>
            <seealso cref="T:AopAlliance.Intercept.IJoinpoint"/>
        </member>
        <member name="T:AopAlliance.Aop.IAdvice">
            <summary>
            Tag interface for advice.
            </summary>
            <remarks>
            <p>
             Implementations can be any type of advice, such as interceptors.
            </p>
            </remarks>
        </member>
        <member name="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Implement this method to perform extra treatments before and after
            the call to the supplied <paramref name="invocation"/>.
            </summary>
            <remarks>
            <p>
            Polite implementations would certainly like to invoke
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>. 
            </p>
            </remarks>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aop.Advice.CacheAdvice.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Applies caching around a method invocation.
            </summary>
            <remarks>
            <p>
            This method tries to retrieve an object from the cache, using the supplied
            <paramref name="invocation"/> to generate a cache key. If an object is found
            in the cache, the cached value is returned and the method call does not
            proceed any further down the invocation chain.
            </p>
            <p>
            If object does not exist in the cache, the advised method is called (using
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>)
            and any return value is cached for the next method invocation.
            </p>
            </remarks>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            A cached object or the result of the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> call.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aop.Advice.CacheAdvice.GetCacheKey(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Returns a cache key based on the supplied <paramref name="invocation"/>.
            </summary>
            <remarks>
            <p>
            If overridden, the subclass must <b>not</b> ever return <see lang="null"/>.
            </p>
            </remarks>
            <param name="invocation">
            The <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> that
            encapsulates the method call to which caching advice has been applied.
            </param>
            <returns>A cache key (guaranteed to not be <see lang="null"/>).</returns>
        </member>
        <member name="M:Spring.Aop.Advice.CacheAdvice.GetObjectFromCache(System.Object)">
            <summary>
            Retrieves an object from the cache.
            </summary>
            <param name="key">The cache key to use for lookup.</param>
            <returns>
            The cached object if found, else <see lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Advice.CacheAdvice.PutObjectInCache(System.Object,System.Object,Spring.Attributes.CacheAttribute)">
            <summary>
            Puts the supplied <paramref name="objectToCache"/> in the cache.
            </summary>
            <param name="key">
            The cache key to associate the <paramref name="objectToCache"/> with.
            </param>
            <param name="objectToCache">The object to cache.</param>
            <param name="cacheInfo">
            The caching details (expiration, sliding, etc.)
            </param>
        </member>
        <member name="T:Spring.Aop.Advice.DebugAdvice">
            <summary>
            Convenience <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            implementation that displays verbose information about intercepted
            invocations to the system console.
            </summary>
            <remarks>
            <p>
            Can be introduced into an interceptor chain to serve as a useful low
            level debugging aid.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
            <seealso cref="T:System.Console"/>
        </member>
        <member name="M:Spring.Aop.Advice.DebugAdvice.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Displays verbose information about intercepted invocations to the
            system console.
            </summary>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
            <seealso cref="T:System.Console"/>
            <seealso cref="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)"/>
        </member>
        <member name="P:Spring.Aop.Advice.DebugAdvice.Count">
            <summary>
            Gets the count of the number of times this interceptor has been
            invoked.
            </summary>
            <returns>
            The count of the number of times this interceptor has been invoked.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.AdvisorAdapterRegistrationManager">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> implementation
            that registers instances of any non-default
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> instances with the
            <see cref="T:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry"/>
            singleton.
            </summary>
            <remarks>
            <p>
            The only requirement for it to work is that it needs to be defined
            in an application context along with any arbitrary "non-native" Spring.NET
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> instances that need
            to be recognized by Spring.NET's AOP framework.
            </p>
            </remarks>
            <author>Dmitriy Kopylenko</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AdvisorAdapterRegistrationManager.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to the given new object instance <i>before</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            Does nothing, simply returns the supplied <paramref name="instance"/> as is.
            </p>
            </remarks>
            <param name="instance">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AdvisorAdapterRegistrationManager.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance <i>after</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            Registers the supplied <paramref name="instance"/> with the
            <see cref="T:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry"/>
            singleton if it is an <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>
            instance.
            </p>
            </remarks>
            <param name="instance">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceAdapter">
            <summary>
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> implementation
            to enable <see cref="T:Spring.Aop.IAfterReturningAdvice"/> to be used in the
            Spring.NET AOP framework.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter">
            <summary>
            Permits the handling of new advisors and advice types as extensions to
            the Spring AOP framework.
            </summary>
            <remarks>
            <p>
            Implementors can create AOP Alliance
            <see cref="T:AopAlliance.Intercept.IInterceptor"/>s from custom advice
            types, enabling these advice types to be used in the Spring.NET AOP
            framework, which uses interception under the covers.
            </p>
            <p>
            There is no need for most Spring.NET users to implement this interface;
            do so only if you need to introduce more
            <see cref="T:Spring.Aop.IAdvisor"/> or <see cref="T:AopAlliance.Aop.IAdvice"/>
            types to Spring.NET.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Does this adapter understand the supplied <paramref name="advice"/>?
            </summary>
            <remarks>
            <p>
            Is it valid to invoke the
            <see cref="M:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry.Wrap(System.Object)"/>
            method with the given advice as an argument?
            </p>
            </remarks>
            <param name="advice">
            <see cref="T:AopAlliance.Aop.IAdvice"/> such as
            <see cref="T:Spring.Aop.IBeforeAdvice"/>.
            </param>
            <returns><see langword="true"/> if this adapter understands the
            supplied <paramref name="advice"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapter.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Return an AOP Alliance
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> exposing the
            behaviour of the given advice to an interception-based AOP
            framework.
            </summary>
            <remarks>
            <p>
            Don't worry about any <see cref="T:Spring.Aop.IPointcut"/>
            contained in the supplied <see cref="T:Spring.Aop.IAdvisor"/>;
            the AOP framework will take care of checking the pointcut.
            </p>
            </remarks>
            <param name="advisor">
            The advice. The
            <see cref="M:Spring.Aop.Framework.Adapter.IAdvisorAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)"/>
            method must have previously returned <see langword="true"/> on the
            supplied <paramref name="advisor"/>.
            </param>
            <returns>
            An AOP Alliance
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> exposing the
            behaviour of the given advice to an interception-based AOP
            framework.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AfterReturningAdviceAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Returns <see langword="true"/> if the supplied
            <paramref name="advice"/> is an instance of the
            <see cref="T:Spring.Aop.IAfterReturningAdvice"/> interface.
            </summary>
            <param name="advice">The advice to check.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> is
            an instance of the <see cref="T:Spring.Aop.IAfterReturningAdvice"/> interface;
            <see langword="false"/> if not or if the supplied
            <paramref name="advice"/> is <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AfterReturningAdviceAdapter.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Wraps the supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> within a
            <see cref="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor"/>
            instance.
            </summary>
            <param name="advisor">
            The advisor exposing the <see cref="T:AopAlliance.Aop.IAdvice"/> that
            is to be wrapped.
            </param>
            <returns>
            The supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> wrapped within a
            <see cref="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor">
            <summary>
            Interceptor to wrap an <see cref="T:Spring.Aop.IAfterReturningAdvice"/>
            instance.
            </summary>
            <remarks>
            <p>
            A more efficient alternative solution in cases where there is no
            interception advice and therefore no need to create an
            <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> object may be
            offered in future.
            </p>
            <p>
            Used internally by the AOP framework: application developers should not need
            to use this class directly.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor.#ctor(Spring.Aop.IAfterReturningAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor"/>
            class.
            </summary>
            <param name="advice">
            The advice to be applied after a target method successfully
            returns.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="advice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Executes interceptor after the target method successfully returns.
            </summary>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.BeforeAdviceAdapter">
            <summary>
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> implementation
            to enable <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> to be used in the
            Spring.NET AOP framework.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.BeforeAdviceAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Returns <see langword="true"/> if the supplied
            <paramref name="advice"/> is an instance of the
            <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> interface.
            </summary>
            <param name="advice">The advice to check.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> is
            an instance of the <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> interface;
            <see langword="false"/> if not or if the supplied
            <paramref name="advice"/> is <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.BeforeAdviceAdapter.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Wraps the supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> within a
            <see cref="T:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor"/>
            instance.
            </summary>
            <param name="advisor">
            The advisor exposing the <see cref="T:AopAlliance.Aop.IAdvice"/> that
            is to be wrapped.
            </param>
            <returns>
            The supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> wrapped within a
            <see cref="T:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry">
            <summary>
            Default implementation of the
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/>
            interface.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry">
            <summary>
            A registry of
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> instances.
            </summary>
            <remarks>
            <p>
            Implementations <b>must</b> also automatically register adapters for
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> types.
            </p>
            <note>
            This is an SPI interface, that should not need to be implemented by any
            Spring.NET user.
            </note>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry.Wrap(System.Object)">
            <summary>
            Returns an <see cref="T:Spring.Aop.IAdvisor"/> wrapping the supplied
            <paramref name="advice"/>.
            </summary>
            <param name="advice">
            The object that should be an advice, such as
            <see cref="T:Spring.Aop.IBeforeAdvice"/> or
            <see cref="T:Spring.Aop.IThrowsAdvice"/>.
            </param>
            <returns> 
            An <see cref="T:Spring.Aop.IAdvisor"/> wrapping the supplied
            <paramref name="advice"/>. Never returns <cref lang="null"/>. If
            the <paramref name="advice"/> parameter is an
            <see cref="T:Spring.Aop.IAdvisor"/>, it will simply be returned.
            </returns>
            <exception cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            If no registered
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> can wrap
            the supplied <paramref name="advice"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Returns an <see cref="T:AopAlliance.Intercept.IInterceptor"/> to
            allow the use of the supplied <paramref name="advisor"/> in an
            interception-based framework. 
            </summary>
            <remarks>
            <p>
            Don't worry about the pointcut associated with the
            <see cref="T:Spring.Aop.IAdvisor"/>; if it's an
            <see cref="T:Spring.Aop.IPointcutAdvisor"/>, just return an
            interceptor.
            </p>
            </remarks>
            <param name="advisor">
            The advisor to find an interceptor for.
            </param>
            <returns>
            An interceptor to expose this advisor's behaviour.
            </returns>
            <exception cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            If the advisor type is not understood by any registered
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry.RegisterAdvisorAdapter(Spring.Aop.Framework.Adapter.IAdvisorAdapter)">
            <summary>
            Register the given <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>.
            </summary>
            <remarks>
            <p>
            Note that it is not necessary to register adapters for
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> instances: these
            must be automatically recognized by an
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/>
            implementation.
            </p>
            </remarks>
            <param name="adapter">
            An <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> that
            understands the particular advisor and advice types.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry"/> class.
            </summary>
            <remarks>
            <p>
            This constructor will also register the well-known
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> types.
            </p>
            </remarks>
            <seealso cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry.Wrap(System.Object)">
            <summary>
            Returns an <see cref="T:Spring.Aop.IAdvisor"/> wrapping the supplied
            <paramref name="advice"/>.
            </summary>
            <param name="advice">
            The object that should be an advice, such as
            <see cref="T:Spring.Aop.IBeforeAdvice"/> or
            <see cref="T:Spring.Aop.IThrowsAdvice"/>.
            </param>
            <returns> 
            An <see cref="T:Spring.Aop.IAdvisor"/> wrapping the supplied
            <paramref name="advice"/>. Never returns <cref lang="null"/>. If
            the <paramref name="advice"/> parameter is an
            <see cref="T:Spring.Aop.IAdvisor"/>, it will simply be returned.
            </returns>
            <exception cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            If no registered
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> can wrap
            the supplied <paramref name="advice"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Returns an <see cref="T:AopAlliance.Intercept.IInterceptor"/> to
            allow the use of the supplied <paramref name="advisor"/> in an
            interception-based framework.
            </summary>
            <param name="advisor">The advisor to find an interceptor for.</param>
            <returns>
            An interceptor to expose this advisor's behaviour.
            </returns>
            <exception cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            If the advisor type is not understood by any registered
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry.RegisterAdvisorAdapter(Spring.Aop.Framework.Adapter.IAdvisorAdapter)">
            <summary>
            Register the given <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>.
            </summary>
            <param name="adapter">
            An <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> that
            understands the particular advisor and advice types.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry">
            <summary>
            Provides Singleton-style access to the default
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/> instance.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry"/> class.
            </summary>
            <remarks>
            <p>
            This contructor is marked as <see langword="private"/> to enforce the
            Singleton pattern
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry.Instance">
            <summary>
            The default <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/> instance.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor">
            <summary>
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> implementation that
            wraps <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> instances.
            </summary>
            <remarks>
            <p>
            In the future Spring.NET may also offer a more efficient alternative
            solution in cases where there is no interception advice and therefore
            no need to create an <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>
            object.
            </p>
            <p>
            Used internally by the Spring.NET AOP framework: application developers
            should not need to use this class directly.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor.#ctor(Spring.Aop.IMethodBeforeAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor"/>
            class.
            </summary>
            <param name="advice">
            The <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> that is to be wrapped.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="advice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Executes interceptor before the target method successfully returns.
            </summary>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.ThrowsAdviceAdapter">
            <summary>
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> implementation
            to enable <see cref="T:Spring.Aop.IThrowsAdvice"/> to be used in the
            Spring.NET AOP framework.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Returns <see langword="true"/> if the supplied
            <paramref name="advice"/> is an instance of the
            <see cref="T:Spring.Aop.IThrowsAdvice"/> interface.
            </summary>
            <param name="advice">The advice to check.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> is
            an instance of the <see cref="T:Spring.Aop.IThrowsAdvice"/> interface;
            <see langword="false"/> if not or if the supplied
            <paramref name="advice"/> is <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceAdapter.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Wraps the supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> within a
            <see cref="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor"/>
            instance.
            </summary>
            <param name="advisor">
            The advisor exposing the <see cref="T:AopAlliance.Aop.IAdvice"/> that
            is to be wrapped.
            </param>
            <returns>
            The supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> wrapped within a
            <see cref="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor">
             <summary>Interceptor to wrap an after throwing advice.</summary>
             <remarks>
             <p>
             Implementations of the <see cref="T:Spring.Aop.IThrowsAdvice"/> interface
             <b>must</b> define methods of the form...
             <code lang="C#">
             AfterThrowing([MethodInfo method, Object[] args, Object target], Exception subclass); 
             </code>
             The method name is fixed (i.e. your methods <b>must</b> be named
             <c>AfterThrowing</c>. The first three arguments (<i>as a whole</i>) are
             optional, and only useful if futher information about the joinpoint is
             required. The return type <i>can</i> be anything, but is almost always
             <see langword="void"/> by convention.
             </p>
             <p>
             Please note that the object encapsulating the throws advice does not
             need to implement the <see cref="T:Spring.Aop.IThrowsAdvice"/> interface.
             Throws advice methods are discovered via reflection... the
             <see cref="T:Spring.Aop.IThrowsAdvice"/> interface serves merely to
             <i>discover</i> objects that are to be considered as throws advice.
             Other mechanisms for discovering throws advice such as attributes are
             also equally valid... all that this class cares about is that a throws
             advice object implement one or more methods with a valid throws advice
             signature (see above, and the examples below).
             </p>
             <p>
             This is a framework class that should not normally need to be used
             directly by Spring.NET users.
             </p>
             </remarks>
             <example>
             <p>
             Find below some examples of valid <see cref="T:Spring.Aop.IThrowsAdvice"/>
             method signatures...
             </p>
             <code language="C#">
             public class GlobalExceptionHandlingAdvice : IThrowsAdvice
             {
                 public void AfterThrowing(Exception ex) {
                     // handles absolutely any and every Exception...
                 }
             }
             </code>
             <code language="C#">
             public class RemotingExceptionHandlingAdvice : IThrowsAdvice
             {
                 public void AfterThrowing(RemotingException ex) {
                     // handles any and every RemotingException (and subclasses of RemotingException)...
                 }
             }
             </code>
             <code language="C#">
             using System.Data;
             
             public class DataExceptionHandlingAdvice
             {
                 public void AfterThrowing(ConstraintException ex) {
                     // specialised handling of ConstraintExceptions
                 }
            
                 public void AfterThrowing(NoNullAllowedException ex) {
                     // specialised handling of NoNullAllowedExceptions
                 }
            
                 public void AfterThrowing(DataException ex) {
                     // handles all other DataExceptions...
                 }
             }
             </code>
             </example>
             <author>Rod Johnson</author>
             <author>Aleksandar Seovic (.NET)</author>
             <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
             <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
        </member>
        <member name="F:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.exceptionHandlers">
            <summary>
            The mapping of exception Types to MethodInfo handlers.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.#ctor(System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor"/> class.
            </summary>
            <remarks>
            </remarks>
            <param name="advice">
            The throws advice to check for exception handler methods.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="advice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If no (0) handler methods were discovered on the supplied <paramref name="advice"/>;
            or if more than one handler method suitable for a particular
            <see cref="T:System.Exception"/> type was discovered on the supplied
            <paramref name="advice"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Executes interceptor if (and only if) the supplied
            <paramref name="invocation"/> throws an exception that is mapped to
            an appropriate exception handler.
            </summary>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/> (this assumes no
            exception was thrown by the call to the supplied <paramref name="invocation"/>.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
            <seealso cref="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)"/>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.GetExceptionHandler(System.Exception)">
            <summary>
            Gets the exception handler (if any) that has been mapped to the
            supplied <paramref name="exception"/>.
            </summary>
            <remarks>
            <p>
            Will return <cref lang="null"/> if not found.
            </p>
            </remarks>
            <returns>
            The exception handler for the <see cref="T:System.Type"/> of the
            supplied <paramref name="exception"/> given exception.
            </returns>
            <param name="exception">exception that was thrown</param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.InvokeHandlerMethod(AopAlliance.Intercept.IMethodInvocation,System.Exception,System.Reflection.MethodInfo)">
            <summary>
            Invokes handler method with appropriate number of parameters
            </summary>
            <param name="invocation">
            The original method invocation that was intercepted.
            </param>
            <param name="triggeringException">
            The exception that triggered this interceptor.
            </param>
            <param name="handlerMethod">
            The exception handler method to invoke.
            </param>
        </member>
        <member name="P:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.HandlerMethodCount">
            <summary>
            Convenience property that returns the number of exception handler
            methods managed by this interceptor.
            </summary>
            <value>
            The number of exception handler methods managed by this interceptor.
            </value>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            <summary>
            Exception thrown when an attempt is made to use an unsupported
            <see cref="T:Spring.Aop.IAdvisor"/> or <see cref="T:AopAlliance.Aop.IAdvice"/>
            type.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor(System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class.
            </summary>
            <param name="advice">The advice that caused the exception.</param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class with
            the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class with
            the specified message and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.Target.AbstractPrototypeTargetSourceCreator">
            <summary>
            Summary description for AbstractPrototypeBasedTargetSourceCreator.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.ITargetSourceCreator">
            <summary>
            Implementations can create special target sources, such as pooling target
            sources, for particular objects. For example, they may base their choice
            on attributes, such as a pooling attribute, on the target type.
            </summary>
            <remarks><p>AbstractAutoProxyCreator can support a number of TargetSourceCreators,
            which will be applied in order.</p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Adhari C Mahendra (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ITargetSourceCreator.GetTargetSource(System.Object,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Create a special TargetSource for the given object, if any.
            </summary>
            <param name="obj">the object to create a TargetSource for</param>
            <param name="name">the name of the object</param>
            <param name="factory">the containing factory</param>
            <returns>a special TargetSource or null if this TargetSourceCreator isn't
             interested in the particular object</returns>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.Target.AbstractPrototypeTargetSourceCreator.logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.Target.AbstractPrototypeTargetSourceCreator.GetTargetSource(System.Object,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Create a special TargetSource for the given object, if any.
            </summary>
            <param name="obj">the object to create a TargetSource for</param>
            <param name="name">the name of the object</param>
            <param name="factory">the containing factory</param>
            <returns>
            a special TargetSource or null if this TargetSourceCreator isn't
            interested in the particular object
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.Target.AbstractPrototypeTargetSourceCreator.CreatePrototypeTargetSource(System.Object,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates the prototype target source.
            </summary>
            <param name="obj">The obj.</param>
            <param name="name">The name.</param>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator">
            <summary>
            Abstract IOBjectPostProcessor implementation that creates AOP proxies.
            This class is completely generic; it contains no special code to handle
            any particular aspects, such as pooling aspects.
            </summary>
            <remarks>
            <p>Subclasses must implement the abstract findCandidateAdvisors() method
            to return a list of Advisors applying to any object. Subclasses can also
            override the inherited shouldSkip() method to exclude certain objects
            from autoproxying, but they must be careful to invoke the shouldSkip()
            method of this class, which tries to avoid circular reference problems
            and infinite loops.</p>
            <p>Advisors or advices requiring ordering should implement the Ordered interface.
            This class sorts advisors by Ordered order value. Advisors that don't implement
            the Ordered interface will be considered to be unordered, and will appear
            at the end of the advisor chain in undefined order.</p>
            </remarks>
            <seealso cref="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.FindCandidateAdvisors"/>
            <author>Rod Johnson</author>
            <author>Adhari C Mahendra (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator">
            <summary>
            ObjectPostProcessor implementation that wraps a group of objects with AOP proxies
            that delegate to the given interceptors before invoking the object itself.
            </summary>
            <remarks>
            <p>This class distinguishes between "common" interceptors: shared for all proxies it
            creates, and "specific" interceptors: unique per object instance. There need not
            be any common interceptors. If there are, they are set using the interceptorNames
            property. As with ProxyFactoryObject, interceptors names in the current factory
            are used rather than object references to allow correct handling of prototype
            advisors and interceptors: for example, to support stateful mixins.
            Any advice type is supported for "interceptorNames" entries.</p>
            <p>Such autoproxying is particularly useful if there's a large number of objects that need
            to be wrapped with similar proxies, i.e. delegating to the same interceptors.
            Instead of x repetitive proxy definitions for x target objects, you can register
            one single such post processor with the object factory to achieve the same effect.</p>
            <p>Subclasses can apply any strategy to decide if a object is to be proxied,
            e.g. by type, by name, by definition details, etc. They can also return
            additional interceptors that should just be applied to the specific object
            instance. The default concrete implementation is ObjectNameAutoProxyCreator,
            identifying the objects to be proxied via a list of object names.</p>
            <p>Any number of TargetSourceCreator implementations can be used with any subclass,
            to create a custom target source - for example, to pool prototype objects.
            Autoproxying will occur even if there is no advice if a TargetSourceCreator specifies
            a custom TargetSource. If there are no TargetSourceCreators set, or if none matches,
            a SingletonTargetSource will be used by default to wrap the object to be autoproxied.</p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rod Johnson</author>
            <author>Adhari C Mahendra (.NET)</author>
            <seealso cref="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.InterceptorNames"/>
            <seealso cref="T:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator"/>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.ProxyConfig">
            <summary>
            Convenience superclass for configuration used in creating proxies,
            to ensure that all proxy creators have consistent properties.
            </summary>
            <remarks>
            <p>
            Note that it is no longer possible to configure subclasses to 
            expose the <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>.
            Interceptors should normally manage their own thread locals if they
            need to make resources available to advised objects. If it is
            absolutely necessary to expose the
            <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>, use an
            interceptor to do so.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyConfig.CopyFrom(Spring.Aop.Framework.ProxyConfig)">
            <summary>
            Copies the configuration from the supplied
            <paramref name="otherConfiguration"/> into this instance.
            </summary>
            <param name="otherConfiguration">
            The configuration to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="otherConfiguration"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyConfig.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.Framework.ProxyConfig"/> configuration.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.Framework.ProxyConfig"/> configuration.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.ProxyTargetType">
            <summary>
            Is the target <see cref="T:System.Type"/> to be proxied in addition
            to any interfaces declared on the proxied <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.Optimize">
            <summary>
            Are any <i>agressive optimizations</i> to be performed?
            </summary>
            <remarks>
            <p>
            The exact meaning of <i>agressive optimizations</i> will differ
            between proxies, but there is usually some tradeoff.
            </p>
            <p>
            For example, optimization will usually mean that advice changes
            won't take effect after a proxy has been created. For this reason,
            optimization is disabled by default. An optimize value of
            <see langword="true"/> may be ignored if other settings preclude
            optimization: for example, if the
            <see cref="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy"/> property
            is set to <see langword="true"/> and such a value is not compatible
            with the optimization.
            </p>
            <p>
            The default is <see langword="false"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy">
            <summary>
            Should proxies obtained from this configuration expose
            the AOP proxy to the
            <see cref="T:Spring.Aop.Framework.AopContext"/> class?
            </summary>
            <remarks>
            <p>
            The default is <see langword="false"/>, as enabling this property
            may impair performance.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.AopProxyFactory">
            <summary>
            Gets and set the factory to be used to create AOP proxies.
            </summary>
            <remarks>
            <p>
            This obviously allows one to customise the
            <see cref="T:Spring.Aop.Framework.IAopProxyFactory"/> implementation,
            allowing different strategies to be dropped in without changing the
            core framework. For example, an
            <see cref="T:Spring.Aop.Framework.IAopProxyFactory"/> implementation
            could return an <see cref="T:Spring.Aop.Framework.IAopProxy"/>
            using remoting proxies, <c>Reflection.Emit</c> or a code generation
            strategy. 
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.IsFrozen">
            <summary>
            Is this configuration frozen?
            </summary>
            <remarks>
            <p>
            The default is not frozen.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.logger">
            <summary>
            The logger for this class hierarchy.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.DO_NOT_PROXY">
            <summary>
            Convenience constant for subclasses: Return value for "do not proxy".
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS">
            <summary>
            Convenience constant for subclasses: Return value for
            "proxy without additional interceptors, just the common ones".
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.interceptorNames">
            <summary>
            Names of common interceptors. We must use object name rather than object references
            to handle prototype advisors/interceptors.
            Default is the empty array: no common interceptors.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Create a proxy with the configured interceptors if the object is
            identified as one to proxy by the subclass.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            No-op for before initialization.
            </summary>
            <param name="obj">The obj.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.ShouldSkip(System.Object,System.String)">
            <summary>
            Subclasses should override this method to return true if this
            object should not be considered for autoproxying by this post processor.
            Sometimes we need to be able to avoid this happening if it will lead to
            a circular reference. This implementation returns true.
            </summary>
            <param name="obj">the new object instance</param>
            <param name="name">the name of the object</param>
            <returns>if remarkable to skip</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.CustomizeProxyFactory(System.Object,Spring.Aop.Framework.ProxyFactory)">
            <summary>
            Subclasses may choose to implement this: for example,
            to change the interfaces exposed
            </summary>
            <param name="obj">object about to be autoproxied</param>
            <param name="pf">ProxyFactory that will be used to create the proxy immediably after this method returns</param>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.IsInfrastructureType(System.Object,System.String)">
            <summary>
            Determines whether the object is an infrastructure type,
            IAdvisor, IMethodInterceptor, AbstractAutoProxyCreator
            </summary>
            <param name="obj">The obj.</param>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if [is infrastructure type] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.GetCustomTargetSource(System.Object,System.String)">
            <summary>
            Create a target source for object instances. Uses any
            TargetSourceCreators if set. Returns null if no Custom TargetSource
            should be used.
            This implementation uses the customTargetSourceCreators property.
            Subclasses can override this method to use a different mechanism.
            </summary>
            <param name="obj">the new object instance</param>
            <param name="name">the name of the object</param>
            <returns>a TargetSource for this object</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.GetAdvicesAndAdvisorsForObject(System.Object,System.String,Spring.Aop.ITargetSource)">
            <summary>
            Return whether the given object is to be proxied, what additional
            advices (e.g. AOP Alliance interceptors) and advisors to apply.
            </summary>
            <remarks>
            <p>The previous name of this method was "GetInterceptorAndAdvisorForObject".
            It has been renamed in the course of general terminology clarification
            in Spring 1.1. An AOP Alliance Interceptor is just a special form of
            Advice, so the generic Advice term is preferred now.</p>
            <p>The third parameter, customTargetSource, is new in Spring 1.1;
            add it to existing implementations of this method.</p>
            </remarks>
            <param name="obj">the new object instance</param>
            <param name="name">the name of the object</param>
            <param name="customTargetSource">targetSource returned by TargetSource property:
            may be ignored. Will be null unless a custom target source is in use.</param>
            <returns>an array of additional interceptors for the particular object;
            or an empty array if no additional interceptors but just the common ones;
            or null if no proxy at all, not even with the common interceptors.</returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.AdvisorAdapterRegistry">
            <summary>
            Specify the AdvisorAdapterRegistry to use. Default is the global 
            AdvisorAdapterRegistry.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.CustomTargetSourceCreators">
            <summary>
            Set custom TargetSourceCreators to be applied in this order.
            If the list is empty, or they all return null, a SingletonTargetSource
            will be created.
            </summary>
            <remarks>
            <p>TargetSourceCreators can only be invoked if this post processor is used
            in a IObjectFactory, and its ObjectFactoryAware callback is used.</p></remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.InterceptorNames">
            <summary>
            Set the common interceptors. These must be object names
            in the current factory. They can be of any advice or#
            advisor type Spring supports. If this property isn't
            set, there will be zero common interceptors. This is
            perfectly valid, if "specific" interceptors such as
            matching Advisors are all we want.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.ApplyCommonInterceptorsFirst">
            <summary>
            Set whether the common interceptors should be applied before
            object-specific ones. Default is true; else, object-specific
            interceptors will get applied first.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            	<p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.Order">
            <summary>
            Propery Order
            </summary>
            <remarks>
            Ordering which will apply to this class's implementation
            of Ordered, used when applying multiple ObjectPostProcessors.
            Default value is int.MaxValue, meaning that it's non-ordered.
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.GetAdvicesAndAdvisorsForObject(System.Object,System.String,Spring.Aop.ITargetSource)">
            <summary>
            Return whether the given object is to be proxied, what additional
            advices (e.g. AOP Alliance interceptors) and advisors to apply.
            </summary>
            <param name="obj">the new object instance</param>
            <param name="name">the name of the object</param>
            <param name="customTargetSource">targetSource returned by TargetSource property:
            may be ignored. Will be null unless a custom target source is in use.</param>
            <returns>
            an array of additional interceptors for the particular object;
            or an empty array if no additional interceptors but just the common ones;
            or null if no proxy at all, not even with the common interceptors.
            </returns>
            <remarks>
            	<p>The previous name of this method was "GetInterceptorAndAdvisorForObject".
            It has been renamed in the course of general terminology clarification
            in Spring 1.1. An AOP Alliance Interceptor is just a special form of
            Advice, so the generic Advice term is preferred now.</p>
            	<p>The third parameter, customTargetSource, is new in Spring 1.1;
            add it to existing implementations of this method.</p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.FindEligibleAdvisors(System.Type)">
            <summary>
            Find all eligible advices and for autoproxying this class.
            </summary>
            <param name="type"></param>
            <returns>the empty list, not null, if there are no pointcuts or interceptors</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.SortAdvisors(System.Collections.IList)">
            <summary>
            Sorts the advisors.
            </summary>
            <param name="advisors">The advisors.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.ShouldSkip(System.Object,System.String)">
            <summary>
            We override this to ensure that we don't get into circular reference hell
            when our own infrastructure (such as this class) depends on advisors that depend
            on objects... We use a ControlFlow object to check that we didn't arrived at this
            call via this classes findCandidateAdvisors() method.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.FindCandidateAdvisors">
            <summary>
            Find all candidate advisors to use in auto-proxying.
            </summary>
            <returns>list of Advisors</returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.ObjectFactory">
            <summary>
            We override this method to ensure that all candidate advisors are materialized
            under a stack trace including this object. Otherwise, the dependencies won't
            be apparent to the circular-reference prevention strategy in AbstractObjectFactory.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator">
            <summary>
            ObjectPostProcessor implementation that creates AOP proxies based on all candidate
            Advisors in the current IObjectFactory. This class is completely generic; it contains
            no special code to handle any particular aspects, such as pooling aspects.
            </summary>
            <author>Rod Johnson</author>
            <author>Adhari C Mahendra (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.SEPARATOR">
            <summary>
            Separator between prefix and remainder of object name
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.FindCandidateAdvisors">
            <summary>
            Find all candidate advices to use in auto proxying.
            </summary>
            <returns>list of Advice</returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.UsePrefix">
            <summary>
            Gets or sets a value indicating whether to exclude
            advisors with a certain prefix.
            </summary>
            <value><c>true</c> if [use prefix]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.AdvisorObjectNamePrefix">
            <summary>
            Set the prefix for object names that will cause them to be included for
            auto-proxying by this object. This prefix should be set to avoid circular
            references. Default value is the object name of this object + a dot.
            </summary>
            <value>The advisor object name prefix.</value>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.ObjectName">
            <summary>
            Set the name of the object in the object factory that created this object.
            </summary>
            <value>The name of the object in the factory.</value>
            <remarks>
            	<p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator">
            <summary>
            Object Auto Proxy Creator
            </summary>
            <remarks>
            Auto proxy creator that identifies objects to proxy via a list of names.
            Checks for direct, "xxx*", and "*xxx" matches.
            </remarks>
            <seealso cref="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.SetObjectNames(System.String[])"/>
            <seealso cref="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.IsMatch(System.String,System.String)"/>
            <author>Juergen Hoeller</author>
            <author>Adhari C Mahendra (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.SetObjectNames(System.String[])">
            <summary>
            Set the names of the objects that should automatically get wrapped with proxies.
            A name can specify a prefix to match by ending with "*", e.g. "myObject,tx*"
            will match the object named "myObject" and all objects whose name start with "tx".
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.GetAdvicesAndAdvisorsForObject(System.Object,System.String,Spring.Aop.ITargetSource)">
            <summary>
            Identify as object to proxy if the object name is in the configured list of names.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.IsMatch(System.String,System.String)">
            <summary>
            Return if the given object name matches the mapped name.
            The default implementation checks for "xxx*" and "*xxx" matches.
            Can be overridden in subclasses.
            </summary>
            <param name="name">the object name to check</param>
            <param name="mappedName">the name in the configured list of names</param>
            <returns>if the names match</returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.ObjectNames">
            <summary>
            Set the names of the objects in IList fashioned way that should automatically 
            get wrapped with proxies.
            A name can specify a prefix to match by ending with "*", e.g. "myObject,tx*"
            will match the object named "myObject" and all objects whose name start with "tx".
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy">
            <summary>
            Base class that each dynamic composition proxy has to extend.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.IAdvised">
            <summary>
            Configuration data for an AOP proxy factory.
            </summary>
            <remarks>
            <p>
            This configuration includes the
            <see cref="T:AopAlliance.Intercept.IInterceptor"/>s,
            <see cref="T:Spring.Aop.IAdvisor"/>s, and (any) proxied interfaces.
            </p>
            <p>
            Any AOP proxy obtained from Spring.NET can be cast to this interface to
            allow the manipulation of said proxy's AOP advice.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
            <seealso cref="T:Spring.Aop.Framework.AdvisedSupport"/>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the end (or tail)
            of the advice (interceptor) chain.
            </summary>
            <remarks>
            <p>
            Please be aware that Spring.NET's AOP implementation only supports
            method advice (as encapsulated by the 
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> interface).
            </p>
            </remarks>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the supplied
            <paramref name="position"/> in the advice (interceptor) chain.
            </summary>
            <remarks>
            <p>
            Please be aware that Spring.NET's AOP implementation only supports
            method advice (as encapsulated by the 
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> interface).
            </p>
            </remarks>
            <param name="position">
            The zero (0) indexed position (from the head) at which the
            supplied <paramref name="advice"/> is to be inserted into the
            advice (interceptor) chain.
            </param>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.IsInterfaceProxied(System.Type)">
            <summary>
            Is the supplied <paramref name="intf"/> (interface)
            <see cref="T:System.Type"/> proxied?
            </summary>
            <param name="intf">
            The interface <see cref="T:System.Type"/> to test.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="intf"/>
            (interface) <see cref="T:System.Type"/> is proxied;
            <see langword="false"/> if not or the supplied
            <paramref name="intf"/> is <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvisor(Spring.Aop.IAdvisor)">
            <summary>
            Adds the supplied <paramref name="advisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvisor(System.Int32,Spring.Aop.IAdvisor)">
            <summary>
            Adds the supplied <paramref name="advisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="index">
            The index in the <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
            list at which the supplied <paramref name="advisor"/>
            is to be inserted.
            </param>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddIntroduction(Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Adds the supplied <paramref name="introductionAdvisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>.
            </summary>
            <param name="introductionAdvisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="introductionAdvisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddIntroduction(System.Int32,Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Adds the supplied <paramref name="introductionAdvisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>.
            </summary>
            <param name="index">
            The index in the <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            list at which the supplied <paramref name="introductionAdvisor"/>
            is to be inserted.
            </param>
            <param name="introductionAdvisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="introductionAdvisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.IndexOf(Spring.Aop.IAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IAdvisor"/> in the interceptor
            (advice) chain for this proxy.
            </summary>
            <remarks>
            <p>
            The return value of this method can be used to index into
            the <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
            list.
            </p>
            </remarks>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an advisor for this
            proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.IndexOf(Spring.Aop.IIntroductionAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> in the introductions
            for this proxy.
            </summary>
            <remarks>
            <p>
            The return value of this method can be used to index into
            the <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            list.
            </p>
            </remarks>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an introduction advisor
            for this proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveAdvisor(Spring.Aop.IAdvisor)">
            <summary>
            Removes the supplied <paramref name="advisor"/> the list of advisors
            for this proxy.
            </summary>
            <param name="advisor">The advisor to remove.</param>
            <returns>
            <see langword="true"/> if advisor was found in the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/> for this
            proxy and was successfully removed; <see langword="false"/> if not
            or if the supplied <paramref name="advisor"/> is <cref lang="null"/>.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveAdvisor(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IAdvisor"/> at the supplied
            <paramref name="index"/> in the
            <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/> list
            from the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/> for this proxy.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IAdvisor"/> to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IAdvisor"/> at the supplied <paramref name="index"/>
            cannot be removed; or if the supplied <paramref name="index"/> is out of
            range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Removes the supplied <paramref name="advice"/> from the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> was
            found in the list of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
            and successfully removed.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:AopAlliance.Aop.IAdvice"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveIntroduction(Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Removes the supplied <paramref name="introduction"/> from the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>.
            </summary>
            <param name="introduction">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="introduction"/> was
            found in the list of <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            and successfully removed.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveIntroduction(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IIntroductionAdvisor"/> at the supplied
            <paramref name="index"/> in the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/> for this proxy.
            </summary>
            <param name="index">The index of the advisor to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> at the supplied
            <paramref name="index"/> cannot be removed; or if the supplied
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.ReplaceIntroduction(System.Int32,Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Replaces the <see cref="T:Spring.Aop.IIntroductionAdvisor"/> that
            exists at the supplied <paramref name="index"/> in the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            with the supplied <paramref name="introduction"/>.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            in the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            that is to be replaced.
            </param>
            <param name="introduction">
            The new (replacement) <see cref="T:Spring.Aop.IIntroductionAdvisor"/>.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.ReplaceAdvisor(Spring.Aop.IAdvisor,Spring.Aop.IAdvisor)">
            <summary> 
            Replaces the <paramref name="oldAdvisor"/> with the
            <paramref name="newAdvisor"/>.
            </summary>
            <param name="oldAdvisor">
            The original (old) advisor to be replaced.
            </param>
            <param name="newAdvisor">
            The new advisor to replace the <paramref name="oldAdvisor"/> with.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="oldAdvisor"/> was
            replaced; if the <paramref name="oldAdvisor"/> was not found in the
            advisors collection, this method returns <see langword="false"/>
            and (effectively) does nothing.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="oldAdvisor"/> cannot be replaced.
            </exception>
            <seealso cref="P:Spring.Aop.Framework.ProxyConfig.IsFrozen"/>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.ToProxyConfigString">
            <summary>
            As <see cref="M:System.Object.ToString"/> will normally be passed
            straight through to the advised target, this method returns the
            <see cref="M:System.Object.ToString"/> equivalent for the AOP
            proxy itself.
            </summary>
            <returns>
            A <see cref="T:System.String"/> description of the proxy configuration.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.ExposeProxy">
            <summary>
            Should proxies obtained from this configuration expose
            the AOP proxy to the
            <see cref="T:Spring.Aop.Framework.AopContext"/> class?
            </summary>
            <remarks>
            <p>
            This is useful if an advised object needs to call another advised
            method on itself. (If it uses the <c>this</c> reference (<c>Me</c>
            in Visual Basic.NET), the invocation will <b>not</b> be advised).
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.AdvisorChainFactory">
            <summary>
            Gets the
            <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/>
            implementation that will be used to get the interceptor
            chains for the advised
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Target"/>.
            </summary>
            <value>
            The <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/>
            implementation that will be used to get the interceptor
            chains for the advised
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Target"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.ProxyTargetType">
            <summary>
            Is the target <see cref="T:System.Type"/> to be proxied in addition
            to any interfaces declared on the proxied <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.Advisors">
            <summary>
            Returns the collection of <see cref="T:Spring.Aop.IAdvisor"/>
            instances that have been applied to this proxy.
            </summary>
            <remarks>
            <p>
            Will never return <cref lang="null"/>, but may return an
            empty array (in the case where no
            <see cref="T:Spring.Aop.IAdvisor"/> instances have been applied to
            this proxy).
            </p>
            </remarks>
            <value>
            The collection of <see cref="T:Spring.Aop.IAdvisor"/>
            instances that have been applied to this proxy.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.Introductions">
            <summary>
            Returns the collection of <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            instances that have been applied to this proxy.
            </summary>
            <remarks>
            <p>
            Will never return <cref lang="null"/>, but may return an
            empty array (in the case where no
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> instances have been
            applied to this proxy).
            </p>
            </remarks>
            <value>
            The collection of <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            instances that have been applied to this proxy.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.Interfaces">
            <summary>
            Returns the collection of interface <see cref="T:System.Type"/>s
            to be (or that are being) proxied by this proxy.
            </summary>
            <value>
            The collection of interface <see cref="T:System.Type"/>s
            to be (or that are being) proxied by this proxy.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.InterfaceMap">
            <summary>
            Returns the mapping of the proxied interface
            <see cref="T:System.Type"/>s to their delegates.
            </summary>
            <value>
            The mapping of the proxied interface
            <see cref="T:System.Type"/>s to their delegates.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.IsFrozen">
            <summary>
            Is this configuration frozen?
            </summary>
            <remarks>
            <p>
            When a config is frozen, no advice changes can be made. This is
            useful for optimization, and useful when we don't want callers
            to be able to manipulate configuration after casting to
            <see cref="T:Spring.Aop.Framework.IAdvised"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.TargetSource">
            <summary>
            Returns the <see cref="T:Spring.Aop.ITargetSource"/> used by this
            <see cref="T:Spring.Aop.Framework.IAdvised"/> object.
            </summary>
            <value>
            The <see cref="T:Spring.Aop.ITargetSource"/> used by this
            <see cref="T:Spring.Aop.Framework.IAdvised"/> object.
            </value>
        </member>
        <member name="T:Spring.Aop.Framework.IAopProxy">
            <summary>
            The central interface for Spring.NET based AOP proxies. 
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.IAopProxy.GetProxy">
            <summary>
            Creates a new proxy object.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.m_advised">
            <summary>
            IAdvised delegate
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.m_introductions">
            <summary>
            Array of introduction delegates
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.m_targetSource">
            <summary>
            Target source wrapper
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.m_targetClass">
            <summary>
            Type of target object.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.m_advisorChain">
            <summary>
            Convinience reference to advisor chain factory.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.EmptyList">
            <summary>
            Optimization fields
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.#ctor(Spring.Aop.Framework.IAdvised)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy"/>
            class.
            </summary>
            <param name="advised">The proxy configuration.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.Invoke(System.Object,System.Type,System.Reflection.MethodInfo,System.Object[],System.Collections.IList)">
            <summary>
            Invokes intercepted methods using reflection
            </summary>
            <param name="target">target object to invoke method on</param>
            <param name="targetType">target type</param>
            <param name="method">taget method to invoke</param>
            <param name="args">method arguments</param>
            <param name="interceptors">interceptor chain</param>
            <returns>value returned by invocation chain</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.GetInterceptors(System.Type,System.String,System.Reflection.MethodInfo)">
            <summary>
            Returns a list of method interceptors
            </summary>
            <param name="targetType">target type</param>
            <param name="methodId">target method identifier</param>
            <param name="method">target method</param>
            <returns>list of inteceptors for the specified method</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.AddAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the end (or tail)
            of the advice (interceptor) chain.
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the supplied
            <paramref name="position"/> in the advice (interceptor) chain.
            </summary>
            <param name="position">
            The zero (0) indexed position (from the head) at which the
            supplied <paramref name="advice"/> is to be inserted into the
            advice (interceptor) chain.
            </param>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.Spring#Aop#Framework#IAopProxy#GetProxy">
            <summary>
            Returns this proxy instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.Equals(System.Object)">
            <summary>
            Delegate to target object handling of equals method.
            </summary>
            <param name="obj">The object to compare with the current target object</param>
            <returns>true if the specified Object is equal to the current target object; otherwise, false</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.GetHashCode">
            <summary>
            Delgate to the target object generation of the hash code.
            </summary>
            <returns>A hash code for the target object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionProxy.ToString">
            <summary>
            Returns a String the represents the target object.
            </summary>
            <returns>A String that represents the target object</returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder">
            <summary>
            Implementation of common method builder functionality
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.IProxyMethodBuilder">
            <summary>
            Defines interface that proxy method builders have to implement
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IProxyMethodBuilder.BuildProxyMethod(System.Type,System.Reflection.MethodInfo,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Dynamically builds proxy method
            </summary>
            <param name="intf">interface method is on</param>
            <param name="method">method to proxy</param>
            <param name="targetMethod">field that references target method</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Creates instance of method builder and initializes type builder to use
            </summary>
            <param name="typeBuilder">type builder to use</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.BuildProxyMethod(System.Type,System.Reflection.MethodInfo,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Dynamically builds proxy method
            </summary>
            <param name="intf">interface method is on</param>
            <param name="method">method to proxy</param>
            <param name="targetMethod">field that references target method</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.CalculateMethodAttributes">
            <summary>
            Calculates method attributes based on method type
            </summary>
            <returns>method attributes for the proxied method</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.DefineParameters">
            <summary>
            Defines method parameters based on proxied method metadata
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.DefineLabels">
            <summary>
            Defines jump labels
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.DeclareLocals">
            <summary>
            Creates local variable declarations
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.InitializeLocals">
            <summary>
            Initializes local variables
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.CallInvoke">
            <summary>
            Calls method using Invoke
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.CallDirect">
            <summary>
            Calls method directly
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.CreateParamArray">
            <summary>
            Creates parameter array
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.EndMethod">
            <summary>
            Ends method by returning return value if appropriate
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.NeedsBoxing(System.Type)">
            <summary>
            Returns true if specified type needs boxing
            </summary>
            <param name="type">type to check</param>
            <returns>true if specified type needs boxing</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.DefineMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Defines proxy method.
            </summary>
            <param name="intf">Interface method belongs to</param>
            <param name="method">Method to proxy</param>
            <returns>Method Builder for the proxy method</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.InitializeTargetType">
            <summary>
            Initializes target type local variable
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.PushTarget">
            <summary>
            Pushes target object to stack
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseProxyMethodBuilder.GenerateMethodLogic">
            <summary>
            Generates method logic
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.BoxingOpCodes">
            <summary>
            Helper class that returns appropriate boxing opcode based on type
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder">
            <summary>
            Implements common functionality for composition proxy builders.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.IProxyBuilder">
            <summary>
            Interface that proxy builders have to implement.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IProxyBuilder.BuildProxy(Spring.Aop.Framework.IAdvised)">
            <summary>
            Dynamically builds and returns proxy instance
            </summary>
            <param name="advised">proxy configuration</param>
            <returns>dynamically generated proxy type</returns>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.DYNAMIC_PROXY_NAME_PREFIX">
            <summary>
            The prefix used to build the proxy type name.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.#ctor(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Creates builder instance and sets AssemblyBuilder to use for type creation
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.BuildProxy(Spring.Aop.Framework.IAdvised)">
            <summary>
            Creates proxy type based on specified configuration
            </summary>
            <param name="advised">proxy configuration</param>
            <returns>Generated proxy type</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.GenerateTypeName">
            <summary>
            Generates unique proxy type name
            </summary>
            <returns>proxy type name</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.GenerateMethodId">
            <summary>
            Generates unique method id
            </summary>
            <returns>proxy type name</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.GenerateConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Generates constructor that calls BaseCompositionProxy constructor
            </summary>
            <param name="typeBuilder">type builder to use</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.ImplementTargetInterface(System.Reflection.Emit.TypeBuilder,System.Type,System.Type)">
            <summary>
            Implements specified interface by delegating calls to target object, either directly (if there are no interceptors),
            or by calling BaseCompositionProxy.Invoke if interceptors exist.
            </summary>
            <param name="typeBuilder">type builder to use for code generation</param>
            <param name="intf">interface to implement</param>
            <param name="targetType">type of target object</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.ImplementIntroductionInterface(System.Reflection.Emit.TypeBuilder,System.Type,System.Int32,System.Type)">
            <summary>
            Implements specified interface by delegating calls to specified introduction, either directly (if there are no interceptors),
            or by calling BaseCompositionProxy.Invoke if interceptors are present.
            </summary>
            <param name="typeBuilder">type builder to use for code generation</param>
            <param name="intf">interface to implement</param>
            <param name="index">index of the introduction to delegate call to</param>
            <param name="introductionType">type of target introduction</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.ImplementMethods(System.Reflection.Emit.TypeBuilder,Spring.Aop.Framework.DynamicProxy.IProxyMethodBuilder,System.Reflection.InterfaceMapping)">
            <summary>
            Implements specified interface methods using specified method builder.
            This methods also generates necessary properties and events.
            </summary>
            <param name="typeBuilder">type builder to use for code generation</param>
            <param name="methodBuilder">method builder to use</param>
            <param name="mapping">methods mappings</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.ImplementProperty(System.Reflection.Emit.TypeBuilder,System.Type,System.Reflection.PropertyInfo,System.Collections.IDictionary)">
            <summary>
            Implements specified property
            </summary>
            <param name="typeBuilder">type builder to use</param>
            <param name="intf">target interface</param>
            <param name="property">property to proxy</param>
            <param name="methodMap">implemented methods map</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.ImplementEvent(System.Reflection.Emit.TypeBuilder,System.Type,System.Reflection.EventInfo,System.Collections.IDictionary)">
            <summary>
            Implements specified event
            </summary>
            <param name="typeBuilder">type builder to use</param>
            <param name="intf">target interface</param>
            <param name="evt">event to proxy</param>
            <param name="methodMap">implemented methods map</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionProxyBuilder.IsProxyClass(System.Type)">
            <summary>
            Determines if a type is one of those generated by this builder
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.DynamicProxyManager">
            <summary>
            Allows easy access to existing and creation of new dynamic proxies in the current AppDomain.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.DynamicProxyManager.DYNAMIC_PROXY_ASSEMBLY">
            <summary>
            Name of dynamically generated proxy assembly
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DynamicProxyManager.GetProxy(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Returns dynamic AOP proxy for the specified proxy configuration
            </summary>
            <param name="advised">Proxy config</param>
            <returns>dynamic AOP proxy for the specified proxy configuration</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DynamicProxyManager.CreateProxyAssembly">
            <summary>
            Creates dynamic proxy assembly
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DynamicProxyManager.Save">
            <summary>
            Saves dynamically generated assembly to disk.
            Can only be called in DEBUG mode, per ConditionalAttribute rules.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.DynamicProxy.DynamicProxyManager.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.DynamicProxy.DynamicProxyManager.ProxyAssembly">
            <summary>
            Returns dynamic proxy assembly
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.DynamicProxy.DynamicProxyManager.ProxyBuilder">
            <summary>
            Write only property that allows user to change proxy builder implementation.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.InheritanceProxyBuilder">
            <summary>
            Implements common functionality for composition proxy builders.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceProxyBuilder.#ctor(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Creates builder instance and sets AssemblyBuilder to use for type creation
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceProxyBuilder.BuildProxy(Spring.Aop.Framework.IAdvised)">
            <summary>
            Dynamically builds and returns proxy type
            </summary>
            <param name="advised">Proxy configuration</param>
            <returns>Dynamically generated proxy type</returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder">
            <summary>
            Implementation of IProxyMethodBuilder that delegates method calls to target object
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,System.Int32)">
            <summary>
            Creates instance of method builder and initializes type builder to use
            </summary>
            <param name="typeBuilder">type builder to use</param>
            <param name="index">index of the introduction to delegate call to</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.DefineMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Defines proxy method for the introduction as private and uses explicit interface implementation.
            </summary>
            <param name="intf">Interface method belongs to</param>
            <param name="method">Method to proxy</param>
            <returns>Method Builder for the proxy method</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.InitializeTargetType">
            <summary>
            Initializes target type local variable
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.PushTarget">
            <summary>
            Pushes target introduction to stack
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.GenerateMethodLogic">
            <summary>
            Generates method logic
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.TargetProxyMethodBuilder">
            <summary>
            Implementation of IProxyMethodBuilder that delegates method calls to target object
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Creates instance of method builder and initializes type builder to use
            </summary>
            <param name="typeBuilder">type builder to use</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetProxyMethodBuilder.DefineMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Defines proxy method for the target object as public and uses implicit interface implementation.
            </summary>
            <param name="intf">Interface method belongs to</param>
            <param name="method">Method to proxy</param>
            <returns>Method Builder for the proxy method</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetProxyMethodBuilder.DefineLabels">
            <summary>
            Defines additional labels
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetProxyMethodBuilder.DeclareLocals">
            <summary>
            Defines additional local variables
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetProxyMethodBuilder.InitializeTargetType">
            <summary>
            Initializes target type local variable
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetProxyMethodBuilder.PushTarget">
            <summary>
            Pushes target object to stack
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetProxyMethodBuilder.GenerateMethodLogic">
            <summary>
            Generates method logic
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AbstractMethodInvocation">
            <summary>
            Convenience base class for <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>
            implementations.
            </summary>
            <remarks>
            <p>
            Subclasses can override the
            <see cref="M:Spring.Aop.Framework.AbstractMethodInvocation.InvokeJoinpoint"/>
            method to change this behavior, so this is a useful/ base class for
            <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> implementations.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:AopAlliance.Intercept.IMethodInvocation">
            <summary>
            Description of an invocation to a method, given to an interceptor
            upon method-call.
            </summary>
            <remarks>
            <p>
            A method invocation is a joinpoint and can be intercepted by a method
            interceptor.
            </p>
            </remarks>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
        </member>
        <member name="T:AopAlliance.Intercept.IInvocation">
            <summary>
            Represents an invocation in the program.
            </summary>
            <remarks>
            <p>
            An invocation is a joinpoint and can be intercepted by an interceptor.
            Typical examples would be a constructor invocation and a method call.
            </p>
            </remarks>
        </member>
        <member name="T:AopAlliance.Intercept.IJoinpoint">
            <summary>
            Represents a generic runtime joinpoint (in the AOP terminology).
            </summary>
            <remarks>
            <p>
            A runtime joinpoint is an <i>event</i> that occurs on a static
            joinpoint (i.e. a location in a program). For instance, an
            invocation is the runtime joinpoint on a method (static joinpoint).
            The static part of a given joinpoint can be generically retrieved
            using the <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/>
            property.
            </p>
            <p>
            In the context of an interception framework, a runtime joinpoint
            is then the reification of an access to an accessible object (a
            method, a constructor, a field), i.e. the static part of the
            joinpoint. It is passed to the interceptors that are installed on
            the static joinpoint.
            </p>
            </remarks>
            <seealso cref="T:AopAlliance.Intercept.IInterceptor"/>
        </member>
        <member name="M:AopAlliance.Intercept.IJoinpoint.Proceed">
            <summary>
            Proceeds to the next interceptor in the chain.
            </summary>
            <remarks>
            <p>
            The implementation and semantics of this method depend on the
            actual joinpoint type. Consult the derived interfaces of this
            interface for specifics.
            </p>
            </remarks>
            <returns>
            Consult the derived interfaces of this interface for specifics.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors at the joinpoint throws an exception.
            </exception>
        </member>
        <member name="P:AopAlliance.Intercept.IJoinpoint.StaticPart">
            <summary>
            Gets the static part of this joinpoint.
            </summary>
            <remarks>
            <p>
            The static part is an accessible object on which a chain of
            interceptors are installed.
            </p>
            </remarks>
            <value>
            The static part of this joinpoint.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IJoinpoint.This">
            <summary>
            Gets the object that holds the current joinpoint's static part.
            </summary>
            <remarks>
            <p>
            For instance, the target object for a method invocation.
            </p>
            </remarks>
            <value>
            The object that holds the current joinpoint's static part.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IInvocation.Arguments">
            <summary>
            Gets the arguments to an invocation.
            </summary>
            <remarks>
            <p>
            It is of course possible to change element values within this array
            to change the arguments to an intercepted invocation.
            </p>
            </remarks>
            <value>
            The arguments to an invocation.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IMethodInvocation.Method">
            <summary>
            Gets the method invocation that is to be invoked.
            </summary>
            <remarks>
            <p>
            This property is a friendly implementation of the
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/> property.
            It should be used in preference to the
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/> property
            because it provides immediate access to the underlying method
            without the need to resort to a cast.
            </p>
            </remarks>
            <value>
            The method invocation that is to be invoked.
            </value>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.arguments">
            <summary>
            The arguments (if any = may be <see lang="null"/>) to the method
            that is to be invoked.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.target">
            <summary>
            The target object that the method is to be invoked on.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.proxy">
            <summary>The AOP proxy for the target object.</summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.interceptors">
            <summary>
            The list of <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> and
            <cref see="Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            that need dynamic checks.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.currentInterceptorIndex">
            <summary>
            The index from 0 of the current interceptor we're invoking.
            -1 until we invoke: thereafter the current interceptor.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.#ctor(System.Object,System.Object,System.Object[],System.Type,System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AbstractMethodInvocation"/> class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such exposes no publicly visible
            constructors.
            </p>
            <p>
            <note type="implementnotes">
            The <paramref name="interceptors"/>	list can also contain any
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>s
            that need evaluation at runtime.
            <see cref="T:Spring.Aop.IMethodMatcher"/>s included in an
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            must already have been found to have matched as far as was possible
            <b>statically</b>. Passing an array might be about 10% faster, but
            would complicate the code, and it would work only for static
            pointcuts.
            </note>
            </p>
            </remarks>
            <param name="proxy">The AOP proxy.</param>
            <param name="target">The target object.</param>
            <param name="arguments">The target method's arguments.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.</param>
            <param name="interceptors">
            The list of interceptors that are to be applied. May be
            <cref lang="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="target"/> is <see lang="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.Proceed">
            <summary>
            Proceeds to the next interceptor in the chain.
            </summary>
            <returns>
            The return value of the method invocation.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors at the joinpoint throws an exception.
            </exception>
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.InvokeJoinpoint">
            <summary>
            Invokes the joinpoint using reflection.
            </summary>
            <remarks>
            <p>
            Subclasses can override this to use custom invocation.
            </p>
            </remarks>
            <returns>
            The return value of the invocation of the joinpoint.
            </returns>
            <exception cref="T:System.Exception">
            If invoking the joinpoint resulted in an exception.
            </exception>
            <see cref="P:Spring.Aop.Framework.ReflectiveMethodInvocation.Method"/>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            invocation.
            </summary>
            <remarks>
            <p>
            <note type="implementnotes">
            Does <b>not</b> invoke <see cref="M:System.Object.ToString"/> on the 
            <see cref="P:Spring.Aop.Framework.AbstractMethodInvocation.This"/> target
            object, as that too may be proxied. 
            </note>
            </p>
            </remarks>
            <returns>
            A <see cref="T:System.String"/> that represents the current invocation.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Method">
            <summary>
            Gets the method invocation that is to be invoked.
            </summary>
            <remarks>
            <p>
            May or may not correspond with a method invoked on an underlying
            implementation of that interface.
            </p>
            </remarks>
            <see cref="P:AopAlliance.Intercept.IMethodInvocation.Method"/>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.StaticPart">
            <summary>
            Gets the static part of this joinpoint.
            </summary>
            <value>
            The proxied member's information.
            </value>
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Proxy">
            <summary>
            Gets the proxy that this interception was made through.
            </summary>
            <value>
            The proxy that this interception was made through.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Arguments">
            <summary>
            Gets and sets the arguments (if any - may be <cref lang="null"/>)
            to the method that is to be invoked.
            </summary>
            <value>
            The arguments (if any - may be <cref lang="null"/>) to the
            method that is to be invoked.
            </value>
            <see cref="P:AopAlliance.Intercept.IInvocation.Arguments"/>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Interceptors">
            <summary>
            The list of method interceptors.
            </summary>
            <remarks>
            <p>
            May be <see lang="null"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.This">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AdvisedSupport">
            <summary>
            Superclass for AOP proxy configuration managers.
            </summary>
            <remarks>
            <p>
            Instances of this class are not themselves AOP proxies, but
            subclasses of this class are normally factories from which AOP proxy
            instances are obtained directly.
            </p>
            <p>
            This class frees subclasses of the housekeeping of
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.IAdvisor"/> instances, but doesn't actually
            implement proxy creation methods, the functionality for which
            is provided by subclasses.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
            <seealso cref="T:Spring.Aop.Framework.IAopProxy"/>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport._advisors">
            <summary>The list of advice.</summary>
            <remarks>
            <p>
            If an <see cref="T:AopAlliance.Intercept.IInterceptor"/> is added, it
            will be wrapped in an advice before being added to this list. 
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport._advisorsArray">
            <summary> 
            Array updated on changes to the advisors list, which is easier to
            manipulate internally
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport._introductions">
            <summary> 
            List of introductions. 
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport._introductionsArray">
            <summary> 
            Array updated on changes to the advisors list, which is easier to
            manipulate internally
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.interfaceMap">
            <summary>
            Interface map specifying which object should interface methods be
            delegated to.
            </summary>
            <remarks>
            <p>
            If entry value is <cref lang="null"/> methods should be delegated
            to the target object.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.m_targetSource">
            <summary>
            The <see cref="T:Spring.Aop.ITargetSource"/> for this instance.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.isActive">
            <summary>
            Set to <see langword="true"/> when the first AOP proxy has been
            created, meaning that we must track advice changes via the
            OnAdviceChange() callback.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.listeners">
            <summary>
            The list of <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> event listeners.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.advisorChainFactory">
            <summary>
            The advisor chain factory.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> class using the
            default advisor chain factory.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.#ctor(System.Type[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> class.
            </summary>
            <param name="interfaces">The interfaces that are to be proxied.</param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this 
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddListener(Spring.Aop.Framework.IAdvisedSupportListener)">
            <summary>
            Registers the supplied <paramref name="listener"/> as a listener for
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> notifications.
            </summary>
            <param name="listener">
            The <see cref="T:Spring.Aop.Framework.IAdvisedSupportListener"/> to
            register.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveListener(Spring.Aop.Framework.IAdvisedSupportListener)">
            <summary>
            Removes the supplied <paramref name="listener"/>.
            </summary>
            <param name="listener">
            The <see cref="T:Spring.Aop.Framework.IAdvisedSupportListener"/> to
            be removed.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddInterface(System.Type)">
            <summary>
            Adds a new interface to the list of interfaces that are proxied by this proxy.
            </summary>
            <param name="intf">
            The interface to be proxied by this proxy.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen
            (<see cref="P:Spring.Aop.Framework.ProxyConfig.IsFrozen"/>);
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="intf"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveInterface(System.Type)">
            <summary>
            Removes the supplied (proxied) <paramref name="intf"/>.
            </summary>
            <remarks>
            <p>
            Does nothing if the supplied (proxied) <paramref name="intf"/>
            isn't proxied.
            </p>
            </remarks>
            <param name="intf">The interface to remove.</param>
            <returns>
            <see langword="true"/> if the interface was removed.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IsInterfaceProxied(System.Type)">
            <summary>
            Is the supplied <paramref name="intf"/> (interface)
            <see cref="T:System.Type"/> proxied?
            </summary>
            <param name="intf">
            The interface <see cref="T:System.Type"/> to test.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="intf"/>
            (interface) <see cref="T:System.Type"/> is proxied;
            <see langword="false"/> if not or the supplied
            <paramref name="intf"/> is <cref lang="null"/>.
            </returns>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.IsInterfaceProxied(System.Type)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the end (or tail)
            of the advice (interceptor) chain.
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the supplied
            <paramref name="position"/> in the advice (interceptor) chain.
            </summary>
            <param name="position">
            The zero (0) indexed position (from the head) at which the
            supplied <paramref name="advice"/> is to be inserted into the
            advice (interceptor) chain.
            </param>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="advice"/> is <cref lang="null"/>;
            or is not an <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            reference; or if the supplied <paramref name="advice"/> is a
            <see cref="T:Spring.Aop.IIntroductionInterceptor"/>.
            </exception>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOf(AopAlliance.Aop.IAdvice)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:AopAlliance.Aop.IAdvice"/> in the interceptor
            (advice) chain for this proxy.
            </summary>
            <remarks>
            <p>
            The return value of this method can be used to index into
            the <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>
            list.
            </p>
            </remarks>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this interceptor, or -1 if the
            supplied <paramref name="advice"/> is not an advice for this
            proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOf(Spring.Aop.IAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IAdvisor"/> in the interceptor
            (advice) chain for this proxy.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an advisor for this
            proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOf(Spring.Aop.IIntroductionAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> in the introductions
            for this proxy.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an introduction advisor
            for this proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveAdvisor(Spring.Aop.IAdvisor)">
            <summary>
            Removes the supplied <paramref name="advisor"/> the list of advisors
            for this proxy.
            </summary>
            <param name="advisor">The advisor to remove.</param>
            <returns>
            <see langword="true"/> if advisor was found in the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/> for this
            proxy and was successfully removed; <see langword="false"/> if not
            or if the supplied <paramref name="advisor"/> is <cref lang="null"/>.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveAdvisor(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IAdvisor"/> at the supplied
            <paramref name="index"/> in the
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/> list
            from the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/> for this proxy.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IAdvisor"/> to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IAdvisor"/> at the supplied <paramref name="index"/>
            cannot be removed; or if the supplied <paramref name="index"/> is out of
            range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Removes the supplied <paramref name="advice"/> from the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> was
            found in the list of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
            and successfully removed.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:AopAlliance.Aop.IAdvice"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveIntroduction(Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Removes the supplied <paramref name="introduction"/> from the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>.
            </summary>
            <param name="introduction">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="introduction"/> was
            found in the list of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>
            and successfully removed.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveIntroduction(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IIntroductionAdvisor"/> at the supplied
            <paramref name="index"/> in the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/> for this proxy.
            </summary>
            <param name="index">The index of the advisor to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> at the supplied
            <paramref name="index"/> cannot be removed; or if the supplied
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvisor(System.Int32,Spring.Aop.IAdvisor)">
            <summary>
            Adds the supplied <paramref name="advisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>.
            </summary>
            <param name="index">
            The index in the <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>
            list at which the supplied <paramref name="advisor"/>
            is to be inserted.
            </param>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvisor(Spring.Aop.IAdvisor)">
            <summary>
            Adds the supplied <paramref name="advisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddIntroduction(System.Int32,Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Adds the supplied <paramref name="introductionAdvisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>.
            </summary>
            <param name="index">
            The index in the <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>
            list at which the supplied <paramref name="introductionAdvisor"/>
            is to be inserted.
            </param>
            <param name="introductionAdvisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="introductionAdvisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddIntroduction(Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Adds the supplied <paramref name="introductionAdvisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>.
            </summary>
            <param name="introductionAdvisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="introductionAdvisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ReplaceIntroduction(System.Int32,Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Replaces the <see cref="T:Spring.Aop.IIntroductionAdvisor"/> that
            exists at the supplied <paramref name="index"/> in the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>
            with the supplied <paramref name="introduction"/>.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            in the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>
            that is to be replaced.
            </param>
            <param name="introduction">
            The new (replacement) <see cref="T:Spring.Aop.IIntroductionAdvisor"/>.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ReplaceAdvisor(Spring.Aop.IAdvisor,Spring.Aop.IAdvisor)">
            <summary> 
            Replaces the <paramref name="oldAdvisor"/> with the
            <paramref name="newAdvisor"/>.
            </summary>
            <param name="oldAdvisor">
            The original (old) advisor to be replaced.
            </param>
            <param name="newAdvisor">
            The new advisor to replace the <paramref name="oldAdvisor"/> with.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="oldAdvisor"/> was
            replaced; if the <paramref name="oldAdvisor"/> was not found in the
            advisors collection (or the <paramref name="newAdvisor"/> is
            <see lang="null"/>, this method returns <see langword="false"/>
            and (effectively) does nothing.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="oldAdvisor"/> cannot be replaced.
            </exception>
            <seealso cref="P:Spring.Aop.Framework.ProxyConfig.IsFrozen"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AdviceIncluded(AopAlliance.Aop.IAdvice)">
            <summary>
            Is the supplied <paramref name="advice"/> included in any
            advisor?
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to check for the
            inclusion of.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/>
            could be run in an invocation (this does not imply that said
            <paramref name="advice"/> will be run).
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.CountAdviceOfType(System.Type)">
            <summary>
            Returns a count of all of the <see cref="T:AopAlliance.Aop.IAdvice"/>
            type-compatible with the supplied <see cref="T:System.Type"/>.
            </summary>
            <param name="interceptorType">
            The <see cref="T:System.Type"/> of the
            <see cref="T:AopAlliance.Aop.IAdvice"/> to check.
            </param>
            <returns>
            A count of all of the <see cref="T:AopAlliance.Aop.IAdvice"/>
            type-compatible with the supplied <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.DieIfFrozen(System.String)">
            <summary>
            Throws an <see cref="T:Spring.Aop.Framework.AopConfigException"/> if
            this instances proxy configuration data is frozen.
            </summary>
            <param name="message">
            The message that will be passed through to the constructor of any
            thrown <see cref="T:Spring.Aop.Framework.AopConfigException"/>.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the configuration for this proxy is frozen.
            </exception>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.IsFrozen"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.UpdateAdvisorsArray">
            <summary>
            Bring the advisors array up to date with the list.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.UpdateIntroductionsArray">
            <summary>
            Bring the introductions array up to date with the list.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.InterfacesChanged">
            <summary>
            Callback method that is invoked when the list of proxied interfaces
            has changed.
            </summary>
            <remarks>
            <p>
            An example of such a change would be when a new introduction is
            added. Resetting
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.ProxyType"/> to
            <cref lang="null"/> will cause a new proxy <see cref="T:System.Type"/>
            to be generated on the next call to get a proxy.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.InterceptorsChanged">
            <summary>
            Callback method that is invoked when the interceptor list has changed.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.CreateAopProxy">
            <summary> 
            Creates an AOP proxy using this instance's configuration data.
            </summary>
            <remarks>
            <p>
            Subclasses must not create a proxy by any other means (at least
            without having a well thought out and cogent reason for doing so).
            This is because the implementation of this method performs some
            required housekeeping logic prior to creating an AOP proxy.
            </p>
            </remarks>
            <seealso cref="M:Spring.Aop.Framework.IAopProxyFactory.CreateAopProxy(Spring.Aop.Framework.AdvisedSupport)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.CopyConfigurationFrom(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Copies the configuration from the supplied other
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> into this instance.
            </summary>
            <remarks>
            <p>
            Useful when this instance has been created using the no-argument
            constructor, and needs to get all of its confiuration data from
            another <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> (most
            usually to have an independant copy of said configuration data).
            </p>
            </remarks>
            <param name="other">
            The <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> instance
            containing the configiration data that is to be copied into this
            instance.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ToProxyConfigString">
            <summary>
            As <see cref="M:System.Object.ToString"/> will normally be passed straight through
            to the advised target, this method returns the <see cref="M:System.Object.ToString"/>
            equivalent for the AOP proxy itself.
            </summary>
            <returns>
            A <see cref="T:System.String"/> description of the proxy configuration.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.Framework.ProxyConfig"/> configuration.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.Framework.ProxyConfig"/> configuration.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.InterfacesToString(System.Text.StringBuilder)">
            <summary>
            Helper method that adds the names of all of the proxied interfaces
            to the buffer of the supplied <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="buffer">
            The <see cref="T:System.Text.StringBuilder"/> to append the proxied interface
            names to.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AdvisorsToString(System.Text.StringBuilder)">
            <summary>
            Helper method that adds advisor's <see cref="M:System.Object.ToString"/>
            to the buffer of the supplied <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="buffer">
            The <see cref="T:System.Text.StringBuilder"/> to append the advisor details to.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.GetInterfaces(System.Object)">
            <summary>
            Gets all of the interfaces implemented by the
            <see cref="T:System.Type"/> of the supplied
            <paramref name="target"/>.
            </summary>
            <param name="target">
            The object to get the interfaces of.
            </param>
            <returns>
            All of the interfaces implemented by the
            <see cref="T:System.Type"/> of the supplied
            <paramref name="target"/>.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.AdvisorChainFactory">
            <summary>
            Gets and sets the
            <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/>
            implementation that will be used to get the interceptor
            chains for the advised
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Target"/>.
            </summary>
            <value>
            The <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/>
            implementation that will be used to get the interceptor
            chains for the advised
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Target"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.Target">
            <summary>
            Sets the target object that is to be advised.
            </summary>
            <remarks>
            <p>
            This is a convenience write-only property that allows client code
            to set the target object... the target object will be implicitly
            wrapped within a new
            <see cref="T:Spring.Aop.Target.SingletonTargetSource"/> instance.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.TargetSource">
            <summary>
            Returns the current <see cref="T:Spring.Aop.ITargetSource"/> used
            by this <see cref="T:Spring.Aop.Framework.IAdvised"/> object.
            </summary>
            <value>
            The <see cref="T:Spring.Aop.ITargetSource"/> used by this
            <see cref="T:Spring.Aop.Framework.IAdvised"/> object.
            </value>
            <see cref="P:Spring.Aop.Framework.IAdvised.TargetSource"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.ProxyType">
            <summary>
            Specifies the <see cref="T:System.Type"/> of proxies that are to be
            created for this instance of proxy config.
            </summary>
            <remarks>
            <p>
            If this property value is <cref lang="null"/> it simply means that
            no proxies have been created yet. Only when the first proxy is
            created will this property value be set by the AOP framework.
            </p>
            <p>
            Users will be able to add interceptors dynamically without proxy
            regeneration, but if they add introductions the proxy
            <see cref="T:System.Type"/> will have to be regenerated.
            </p>
            </remarks>
            <value>
            The <see cref="T:System.Type"/> of proxies that are to be
            created for this instance of proxy config; <cref lang="null"/> if
            no proxies have been created yet.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.ProxyConstructor">
            <summary>
            Caches proxy constructor for performance reasons.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.Interfaces">
            <summary>
            Returns the collection of interface <see cref="T:System.Type"/>s
            to be (or that are being) proxied by this proxy.
            </summary>
            <value>
            The collection of interface <see cref="T:System.Type"/>s
            to be (or that are being) proxied by this proxy.
            </value>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.Interfaces"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.InterfaceMap">
            <summary>
            Returns the mapping of the proxied interface
            <see cref="T:System.Type"/>s to their delegates.
            </summary>
            <value>
            The mapping of the proxied interface
            <see cref="T:System.Type"/>s to their delegates.
            </value>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.InterfaceMap"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.Advisors">
            <summary>
            Returns the collection of <see cref="T:Spring.Aop.IAdvisor"/>
            instances that have been applied to this proxy.
            </summary>
            <value>
            The collection of <see cref="T:Spring.Aop.IAdvisor"/>
            instances that have been applied to this proxy.
            </value>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.Introductions">
            <summary>
            Returns the collection of <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            instances that have been applied to this proxy.
            </summary>
            <remarks>
            <p>
            Will never return <cref lang="null"/>, but may return an
            empty array (in the case where no
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> instances have been
            applied to this proxy).
            </p>
            </remarks>
            <value>
            The collection of <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            instances that have been applied to this proxy.
            </value>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.IsActive">
            <summary>
            Have any AOP proxies been created yet?
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AdvisorChainFactoryUtils">
            <summary>
            Utility methods for use by
            <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/> implementations.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisorChainFactoryUtils.CalculateInterceptors(Spring.Aop.Framework.IAdvised,System.Object,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets the list of
            <see langword="static"/> interceptors and dynamic interception
            advice that may apply to the supplied <paramref name="method"/>
            invocation.
            </summary>
            <param name="config">The proxy configuration.</param>
            <param name="proxy">The object proxy.</param>
            <param name="method">
            The method to evaluate interceptors for.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <returns>
            A <see cref="T:System.Collections.IList"/> of
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> (if there's
            a dynamic method matcher that needs evaluation at runtime).
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisorChainFactoryUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AdvisorChainFactoryUtils"/>
            class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Framework.AopConfigException">
            <summary>
            Thrown in response to the misconfiguration of an AOP proxy.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.AopConfigException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopConfigException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AopConfigException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopConfigException"/> class with
            the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AopConfigException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopConfigException"/> class with
            the specified message and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AopConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopConfigException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.AopContext">
            <summary>
            This class contains various <see langword="static"/> methods used to
            obtain information about the current AOP invocation.
            </summary>
            <remarks>
            <p>
            The <see langword="static"/>
            <see cref="P:Spring.Aop.Framework.AopContext.CurrentProxy"/> property is
            usable if the AOP framework is configured to expose the current proxy
            (not the default)... it returns the AOP proxy in use. Target objects or
            advice can use this to make advised calls. They can also use it to find
            advice configuration.
            </p>
            <note>
            The AOP framework does not expose proxies by default, as there is a
            performance cost in doing so.
            </note>
            <p>
            The functionality in this class might be used by a target object that
            needed access to resources on the invocation. However, this approach
            should not be used when there is a reasonable alternative, as it makes
            application code dependent on usage under AOP and the Spring.NET AOP
            framework.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="F:Spring.Aop.Framework.AopContext._proxyStack">
            <summary>
            The AOP proxy associated with this thread.
            </summary>
            <remarks>
            <p>
            Will be <cref lang="null"/> unless the
            <see cref="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy"/> property
            on the controlling proxy has been set to <see langword="true"/>.
            </p>
            <p>
            The default value for th
            <see cref="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy"/> property
            is <see langword="false"/>, for performance reasons.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AopContext.PushProxy(System.Object)">
            <summary>
            Sets the current proxy by pushing it to the proxy stack. 
            </summary>
            <remarks>
            <p>
            This method is for internal use only, and should never be called by
            client code.
            </p>
            </remarks>
            <param name="proxy">
            The proxy to put on top of the proxy stack.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AopContext.PopProxy">
            <summary>
            Removes the current proxy from the proxy stack, making the previous
            proxy (if any) the current proxy.
            </summary>
            <remarks>
            <p>
            This method is for internal use only, and should never be called by
            client code.
            </p>
            </remarks>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the proxy stack is empty.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AopContext.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopContext"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AopContext.CurrentProxy">
            <summary>
            Gets the current AOP proxy.
            </summary>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the proxy stack is empty.
            </exception>
        </member>
        <member name="T:Spring.Aop.Framework.AopProxyUtils">
            <summary>
            Miscellaneous utilities for AOP proxies.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.AopProxyUtils.CompleteProxiedInterfaces(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Gets the complete set of interfaces to proxy.
            </summary>
            <remarks>
            <note>
            This will always add the <see cref="T:Spring.Aop.Framework.IAdvised"/>
            interface.
            </note>
            </remarks>
            <param name="advised">
            The advised support from which the interfaces are to be retrieved.
            </param>
            <returns>
            The complete set of interfaces to proxy (including the
            <see cref="T:Spring.Aop.Framework.IAdvised"/> interface).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="advised"/> is
            <see langword="null"/>.
            </exception>
            <seealso cref="T:Spring.Aop.Framework.IAdvised"/>
        </member>
        <member name="M:Spring.Aop.Framework.AopProxyUtils.InvokeJoinpointUsingReflection(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes the supplied <paramref name="method"/> joinpoint on the
            supplied <paramref name="target"/> directly via reflection.
            </summary>
            <param name="target">
            The target object to invoke the supplied
            <paramref name="method"/> on.
            </param>
            <param name="method">The method to invoke.</param>
            <param name="args">
            The method arguments (if any). May be <cref lang="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If either the supplied <paramref name="target"/> or
            the supplied <paramref name="method "/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:AopAlliance.Aop.AspectException">
            If the invocation of the supplied <paramref name="method"/>
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AopProxyUtils.EqualsInProxy(Spring.Aop.Framework.AdvisedSupport,Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Check the equality of the proxies behind the supplied
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> objects.
            </summary>
            <remarks>
            <note>
            This is <b>not</b> the same as the equality of the supplied
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> objects:
            rather, this is the equality of interfaces, advisors and target
            sources.
            </note>
            </remarks>
            <param name="one">
            The first <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> to check.
            </param>
            <param name="two">
            The second <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> to check.
            </param>
            <returns>
            <see langword="true"/> if the supplied
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> objects are
            equal in the context of their interfaces, advisors and target
            sources. Will return <see langword="false"/> if not or if both
            or one of the supplied
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> objects are
            <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopProxyUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopProxyUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Framework.Aspect">
            <summary>
            Represents AOP Aspect.
            </summary>
            <remarks>
            <p>
            This class encapsulates all the details about the aspect, such as pointcuts, introductions and advices.
            </p>
            <p>
            Instances of this class will typically be configured in the Spring application context and applied
            using AspectPostProcessor.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.Aspect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aop.Framework.Aspect"/> class.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.Aspect.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Spring.Aop.Framework.DefaultAopProxyFactory">
            <summary>
            Default implementation of the
            <see cref="T:Spring.Aop.Framework.IAopProxyFactory"/> interface.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.IAopProxyFactory">
            <summary> 
            Factory interface for the creation of AOP proxies based on
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> configuration
            objects.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.IAopProxyFactory.CreateAopProxy(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Creates an <see cref="T:Spring.Aop.Framework.IAopProxy"/> for the
            supplied <paramref name="advisedSupport"/> configuration.
            </summary>
            <param name="advisedSupport">The AOP configuration.</param>
            <returns>An <see cref="T:Spring.Aop.Framework.IAopProxy"/>.</returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="advisedSupport"/> configuration is
            invalid.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.DefaultAopProxyFactory.CreateAopProxy(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Creates an <see cref="T:Spring.Aop.Framework.IAopProxy"/> for the
            supplied <paramref name="advisedSupport"/> configuration.
            </summary>
            <param name="advisedSupport">The AOP configuration.</param>
            <returns>An <see cref="T:Spring.Aop.Framework.IAopProxy"/>.</returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="advisedSupport"/> configuration is
            invalid.
            </exception>
            <seealso cref="M:Spring.Aop.Framework.IAopProxyFactory.CreateAopProxy(Spring.Aop.Framework.AdvisedSupport)"/>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicTargetSourceWrapper">
            <summary>
            Decorates a target source with the <see cref="T:System.IDisposable"/>
            interface.
            </summary>
            <remarks>
            <p>
            This implementation will release the target object when said object
            is disposed.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.ITargetSourceWrapper">
            <summary>
            Decorates a target source with the <see cref="T:System.IDisposable"/>
            interface.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.ITargetSourceWrapper.GetTarget">
            <summary>
            Returns the target object that proxy methods will be delegated to.
            </summary>
            <returns>The target object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicTargetSourceWrapper.#ctor(Spring.Aop.ITargetSource)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.DynamicTargetSourceWrapper"/>
            class.
            </summary>
            <param name="targetSource">
            The target object that proxy methods will be delegated to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="targetSource"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicTargetSourceWrapper.GetTarget">
            <summary>
            Returns the target object that proxy methods will be delegated to.
            </summary>
            <returns>The target object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicTargetSourceWrapper.Dispose">
            <summary>
            Releases the dynamic target when this object is disposed.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory">
            <summary> 
            <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/> implementation
            that caches advisor chains on a per-advised-method basis.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.IAdvisorChainFactory">
            <summary>
            Factory interface for advisor chains.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.IAdvisedSupportListener">
            <summary>
            Callback interface for
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> listeners.
            </summary>
            <remarks>
            <p>
            Allows <see cref="T:Spring.Aop.Framework.IAdvisedSupportListener"/>
            implementations to be notified of notable lifecycle events relating
            to the creation of a proxy, and changes to the configuration data of a
            proxy.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvisedSupportListener.Activated(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when the first proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvisedSupportListener.AdviceChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when advice is changed after a proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvisedSupportListener.InterfacesChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when interfaces are changed after a proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvisorChainFactory.GetInterceptors(Spring.Aop.Framework.IAdvised,System.Object,System.String,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets the list of <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            instances for the supplied <paramref name="proxy"/>.
            </summary>
            <param name="advised">The proxy configuration object.</param>
            <param name="proxy">The object proxy.</param>
            <param name="methodId">
            The target method's unique identifier.
            </param>
            <param name="method">
            The method for which the interceptors are to be evaluated.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <returns> 
            The list of <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            instances for the supplied <paramref name="proxy"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.GetInterceptors(Spring.Aop.Framework.IAdvised,System.Object,System.String,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets the list of <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            instances for the supplied <paramref name="proxy"/>.
            </summary>
            <param name="advised">The proxy configuration object.</param>
            <param name="proxy">The object proxy.</param>
            <param name="methodId">
            The target method's unique identifier.
            </param>
            <param name="method">
            The method for which the interceptors are to be evaluated.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <returns> 
            The list of <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            instances for the supplied <paramref name="proxy"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.Activated(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when the first proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.AdviceChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when advice is changed after a proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.InterfacesChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when interfaces are changed after a proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher">
            <summary> Internal framework class.
            This class is required because if we put an interceptor that implements IInterceptionAdvice
            in the interceptor list passed to MethodInvocation, it may be mistaken for an
            advice that requires dynamic method matching.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Framework.ITargetAware">
            <summary>
            Provides access to the target object of an AOP proxy.
            </summary>
            <remarks>
            <p>
            To be implemented by introduction aspects in order to obtain access to
            the target object.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="P:Spring.Aop.Framework.ITargetAware.TargetProxy">
            <summary>
            Sets the <see cref="T:Spring.Aop.Framework.IAopProxy"/> target object.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.ProxyFactory">
            <summary>
            Factory for AOP proxies for programmatic use, rather than via a
            Spring.NET IoC container.
            </summary>
            <remarks>
            <p>
            This class provides a simple way of obtaining and configuring AOP
            proxies in code.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/>
            class that proxys all of the interfaces exposed by the supplied
            <paramref name="target"/>.
            </summary>
            <param name="target">The object to proxy.</param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the <paramref name="target"/> is <cref lang="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.#ctor(System.Type[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/>
            class that has no target object, only interfaces.
            </summary>
            <remarks>
            <p>
            Interceptors must be added if this factory is to do anything useful.
            </p>
            </remarks>
            <param name="interfaces">The interfaces to implement.</param>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.GetProxy">
            <summary>
            Creates a new proxy according to the settings in this factory.
            </summary>
            <remarks>
            <p>
            Can be called repeatedly; the effect of repeated invocations will
            (of course) vary if interfaces have been added or removed.
            </p>
            </remarks>
            <returns>An AOP proxy for target object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.GetProxy(System.Type,AopAlliance.Intercept.IInterceptor)">
            <summary>
            Creates a new proxy for the supplied <paramref name="proxyInterface"/>
            and <paramref name="interceptor"/>.
            </summary>
            <remarks>
            <p>
            This is a convenience method for creating a proxy for a single
            interceptor.
            </p>
            </remarks>
            <param name="proxyInterface">
            The interface that the proxy must implement.
            </param>
            <param name="interceptor">
            The interceptor that the proxy must invoke.
            </param>
            <returns>
            A new AOP proxy for the supplied <paramref name="proxyInterface"/>
            and <paramref name="interceptor"/>.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.ProxyFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation to
            source AOP proxies from a Spring.NET IoC container (an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>).
            </summary>
            <remarks>
            <p>
            <see cref="T:AopAlliance.Intercept.IInterceptor"/>s and
            <see cref="T:Spring.Aop.IAdvisor"/>s are identified by a list of object
            names in the current container.</p>
            <p>
            Global interceptors and advisors can be added at the factory level
            (that is, outside the context of a
            <see cref="T:Spring.Aop.Framework.ProxyFactoryObject"/> definition). The
            specified interceptors and advisors are expanded in an interceptor list
            (see
            <see cref="P:Spring.Aop.Framework.ProxyFactoryObject.InterceptorNames"/>)
            where an <c>'xxx*'</c> wildcard-style entry is included in the list,
            matching the given prefix with the object names. For example,
            <c>'global*'</c> would match both <c>'globalObject1'</c> and
            <c>'globalObjectBar'</c>, and <c>'*'</c> would match all defined
            interceptors. The matching interceptors get applied according to their
            returned order value, if they implement the
            <see cref="T:Spring.Core.IOrdered"/> interface. An interceptor name list
            may not conclude with a global <c>'xxx*'</c> pattern, as global
            interceptors cannot invoke targets.
            </p>
            <p>
            It is possible to cast a proxy obtained from this factory to an
            <see cref="T:Spring.Aop.Framework.IAdvised"/> reference, or to obtain the
            <see cref="T:Spring.Aop.Framework.ProxyFactoryObject"/> reference and
            programmatically manipulate it. This won't work for existing prototype
            references, which are independent... however, it will work for prototypes
            subsequently obtained from the factory. Changes to interception will
            work immediately on singletons (including existing references).
            However, to change interfaces or the target it is necessary to obtain a
            new instance from the surrounding container. This means that singleton
            instances obtained from the factory do not have the same object
            identity... however, they do have the same interceptors and target, and
            changing any reference will change all objects.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Federico Spinazzi (.NET)</author>
            <author>Choy Rim (.NET)</author>
            <author>Mark Pollack (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
            <seealso cref="P:Spring.Aop.Framework.ProxyFactoryObject.InterceptorNames"/>
            <seealso cref="P:Spring.Aop.Framework.ProxyFactoryObject.ProxyInterfaces"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            <seealso cref="T:Spring.Aop.IAdvisor"/>
            <seealso cref="T:Spring.Aop.Target.SingletonTargetSource"/>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.GlobalInterceptorSuffix">
            <summary>
            This suffix in a value in an interceptor list indicates to expand globals.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.logger">
            <summary>
            The shared <see cref="T:log4net.ILog"/> instance for this class.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.singleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.singletonInstance">
            <summary>
            The cached instance if this proxy factory object is a singleton.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.objectFactory">
            <summary>
            The owning object factory (which cannot be changed after this object is initialized).
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.sourceDictionary">
            <summary> 
            The mapping from an <see cref="T:Spring.Aop.IPointcut"/> or interceptor
            to an object name (or <see lang="null"/>), depending on where it was
            sourced from.
            </summary>
            <remarks>
            <p>
            If it's sourced from object name, it will need to be
            refreshed each time a new prototype instance is created.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.interceptorNames">
            <summary>
            Names of interceptors and pointcut objects in the factory.
            </summary>
            <remarks>
            <p>
            Default is for globals expansion only.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.introductionNames">
            <summary>
            Names of introductions and pointcut objects in the factory.
            </summary>
            <remarks>
            <p>
            Default is for globals expansion only.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.targetName">
            <summary>
            The name of the target object(in the enclosing
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>).
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.GetObject">
            <summary> 
            Creates an instance of the AOP proxy to be returned by this factory
            </summary>
            <remarks>
            <p>
            Invoked when clients obtain objects from this factory object. The
            (proxy) instance will be cached for a singleton, and created on each
            call to <see cref="M:Spring.Aop.Framework.ProxyFactoryObject.GetObject"/>
            for a prototype.
            </p>
            </remarks>
            <returns>
            A fresh AOP proxy reflecting the current state of this factory.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.ConfigureAdvisorChain">
            <summary>Create the advisor (interceptor) chain.</summary>
            <remarks>
            The advisors that are sourced from an ObjectFactory will be refreshed each time
            a new prototype instance is added. Interceptors added programmatically through 
            the factory API are unaffected by such changes.
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.ConfigureIntroductions">
            <summary>
            Configures introductions for this proxy.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.AddGlobalAdvisor(Spring.Objects.Factory.IListableObjectFactory,System.String)">
            <summary> Add all global interceptors and pointcuts.</summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.AddGlobalIntroduction(Spring.Objects.Factory.IListableObjectFactory,System.String)">
            <summary> Add all global introductions.</summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.AddAdvisor(System.Object,System.String)">
            <summary> Add the given interceptor or pointcut to the interceptor list.</summary>
            <param name="next">interceptor or pointcut to add</param>
            <param name="name">object name from which we obtained this object in our owning object factory</param>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.AddIntroduction(System.Object,System.String)">
            <summary>Add the introduction to the introduction list.</summary>
            <remarks>
            If specified parameter is IIntroducionAdvisor it is added directly, otherwise it is wrapped
            with DefaultIntroductionAdvisor first.
            </remarks>
            <param name="introduction">introducion to add</param>
            <param name="name">object name from which we obtained this object in our owning object factory</param>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.RefreshAdvisorChain">
            <summary> Refresh named objects from the interceptor chain.
            We need to do this every time a new prototype instance is returned,
            to return distinct instances of prototype interfaces and pointcuts.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.RefreshTarget">
            <summary>
            Refreshes target object for prototype instances.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.RefreshIntroductions">
            <summary> Refresh named objects from the interceptor chain.
            We need to do this every time a new prototype instance is returned,
            to return distinct instances of prototype interfaces and pointcuts.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.NamedObjectToAdvisor(System.Object)">
            <summary>Wraps pointcut or interceptor with appropriate advisor</summary>
            <param name="next">pointcut or interceptor that needs to be wrapped with advisor</param>
            <returns>Advisor</returns>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.NamedObjectToTargetSource(System.Object)">
            <summary>Wraps target with SingletonTargetSource if necessary</summary>
            <param name="target">target or target source object</param>
            <returns>target source passed or target wrapped with SingletonTargetSource</returns>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.NamedObjectToIntroduction(System.Object)">
            <summary>Wraps introduction with IIntroductionAdvisor if necessary</summary>
            <param name="introduction">object to wrap</param>
            <returns>Introduction advisor</returns>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.Activated(Spring.Aop.Framework.AdvisedSupport)">
            <seealso cref="M:Spring.Aop.Framework.IAdvisedSupportListener.Activated(Spring.Aop.Framework.AdvisedSupport)">
            </seealso>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.AdviceChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary> No need to do anything when advice change, proxy can handle those changes by itself.</summary>
            <seealso cref="M:Spring.Aop.Framework.IAdvisedSupportListener.AdviceChanged(Spring.Aop.Framework.AdvisedSupport)">
            </seealso>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.InterfacesChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>Implementation of listener for AdvisedSupport.InterfacesChanged event</summary>
            <param name="advisedSupport">event source</param>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.ProxyInterfaces">
            <summary>
            Sets the names of the interfaces that are to be implemented by the proxy.
            </summary>
            <value>
            The names of the interfaces that are to be implemented by the proxy.
            </value>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied value (or any of its elements) is <see langword="null"/>;
            or if any of the element values is not the (assembly qualified) name of
            an interface type.
            </exception>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.TargetName">
            <summary>
            Sets the name of the target object being proxied.
            </summary>
            <remarks>
            <p>
            Only works when the
            <see cref="P:Spring.Aop.Framework.ProxyFactoryObject.ObjectFactory"/>
            property is set; it is a logic error on the part of the programmer
            if this value is set and the accompanying
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> is not also set.
            </p>
            </remarks>
            <value>
            The name of the target object being proxied.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.InterceptorNames">
            <summary> 
            Sets the list of <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> and
            <see cref="T:Spring.Aop.IAdvisor"/> object names.
            </summary>
            <remarks>
            <p>
            This property must always be set (configured) when using a
            <see cref="T:Spring.Aop.Framework.ProxyFactoryObject"/> in an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> context.
            </p>
            </remarks>
            <value>
            The list of <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> and
            <see cref="T:Spring.Aop.IAdvisor"/> object names.
            </value>
            <seealso cref="T:AopAlliance.Intercept.IInterceptor"/>
            <seealso cref="T:Spring.Aop.IAdvisor"/>
            <seealso cref="T:Spring.Objects.Factory.IObjectFactory"/>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.IntroductionNames">
            <summary> 
            Sets the list of introduction object names. 
            </summary>
            <remarks>
            <p>
            Only works when the
            <see cref="P:Spring.Aop.Framework.ProxyFactoryObject.ObjectFactory"/>
            property is set; it is a logic error on the part of the programmer
            if this value is set and the accompanying
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> is not supplied.
            </p>
            </remarks>
            <value>
            The list of introduction object names. .
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.IObjectFactory"/>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.ObjectType">
            <summary>
            Return the <see cref="T:System.Type"/> of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <see langword="null"/> if not known in advance.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.ReflectiveMethodInvocation">
            <summary>
            Invokes a target method invocation using reflection.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="F:Spring.Aop.Framework.ReflectiveMethodInvocation.method">
            <summary>The method to invoke.</summary>
        </member>
        <member name="M:Spring.Aop.Framework.ReflectiveMethodInvocation.#ctor(System.Object,System.Object,System.Reflection.MethodInfo,System.Object[],System.Type,System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.ReflectiveMethodInvocation"/> class.
            </summary>
            <param name="proxy">The AOP proxy.</param>
            <param name="target">The target object.</param>
            <param name="method">The target method.</param>
            <param name="arguments">The target method's arguments.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.</param>
            <param name="interceptors">
            The list of interceptors that are to be applied. May be
            <cref lang="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If any of the <paramref name="target"/> or <paramref name="method"/>
            parameters is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Aop.Framework.ReflectiveMethodInvocation.Method">
            <summary>
            Gets the method invocation that is to be invoked.
            </summary>
            <seealso cref="P:AopAlliance.Intercept.IMethodInvocation.Method"/>
            <seealso cref="P:Spring.Aop.Framework.AbstractMethodInvocation.Method"/>
        </member>
        <member name="T:Spring.Aop.Framework.StaticTargetSourceWrapper">
            <summary>
            Decorates a target source with the <see cref="T:System.IDisposable"/>
            interface.
            </summary>
            <remarks>
            <p>
            Because the target source is static, the target object can be cached
            and simply returned as is.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Framework.StaticTargetSourceWrapper.#ctor(Spring.Aop.ITargetSource)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.StaticTargetSourceWrapper"/>
            class.
            </summary>
            <param name="targetSource">
            The target object that proxy methods will be delegated to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="targetSource"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.StaticTargetSourceWrapper.GetTarget">
            <summary>
            Returns the target object that proxy methods will be delegated to.
            </summary>
            <returns>The target object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.StaticTargetSourceWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            <note type="implementnotes">
            This is a no-op operation in this implementation.
            </note>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut">
            <summary>
            Abstract base regular expression pointcut object.
            </summary>
            <remarks>
            <p>
            The regular expressions must be a match. For example, the
            <code>.*Get.*</code> pattern will match <c>Com.Mycom.Foo.GetBar()</c>, and
            <code>Get.*</code> will not.
            </p>
            <p>
            This base class is serializable. Subclasses should decorate all
            fields with the <see cref="T:System.NonSerializedAttribute"/> - the
            <see cref="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.InitPatternRepresentation(System.String[])"/>
            method in this class will be invoked again on the client side on deserialization.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Support.StaticMethodMatcherPointcut">
            <summary> 
            Convenient superclass when one wants to force subclasses to
            implement the <see cref="T:Spring.Aop.IMethodMatcher"/> interface
            but subclasses will still want to be pointcuts.
            </summary>
            <remarks>
            <p>
            The <see cref="P:Spring.Aop.Support.StaticMethodMatcherPointcut.TypeFilter"/>
            property can be overriden to customize <see cref="T:System.Type"/> filter
            behavior as well.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Support.StaticMethodMatcher">
            <summary> 
            Convenient abstract superclass for static method matchers that don't care
            about arguments at runtime. 
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.IMethodMatcher">
            <summary>
            That part of an <see cref="T:Spring.Aop.IPointcut"/> that checks whether a
            target method is eligible for advice.
            </summary>
            <remarks>
            <p>
            An <see cref="T:Spring.Aop.IMethodMatcher"/> may be evaluated
            <b>statically</b> or at runtime (<b>dynamically</b>). Static
            matching involves only the method signature and (possibly) any
            <see cref="T:System.Attribute"/>s that have been applied to a method.
            Dynamic matching additionally takes into account the actual argument
            values passed to a method invocation.
            </p>
            <p>
            If the value of the <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/>
            property of an implementation instance returns <see langword="false"/>,
            evaluation can be performed statically, and the result will be the same
            for all invocations of this method, whatever their arguments. This
            means that if the value of the
            <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/> is
            <see langword="false"/>, the three argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
            method will never be invoked for the lifetime of the
            <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </p>
            <p>
            If an implementation returns <see langword="true"/> in its two argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
            method, and the value of it's
            <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/> property is
            <see langword="true"/>, the three argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
            method will be invoked <i>immediately before each and every potential
            execution of the related advice</i>, to decide whether the advice
            should run. All previous advice, such as earlier interceptors in an
            interceptor chain, will have run, so any state changes they have
            produced in parameters or thread local storage, will be available at
            the time of evaluation.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
            <seealso cref="T:Spring.Aop.TrueMethodMatcher"/>
        </member>
        <member name="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            This is a static check. If this method invocation returns
            <see langword="false"/>,or if the
            <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/> property is
            <see langword="false"/>, then no runtime check will be made.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            In order for this method to have even been invoked, the supplied
            <paramref name="method"/> must have matched
            statically. This method is invoked only if the two argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
            method returns <see langword="true"/> for the supplied
            <paramref name="method"/> and <paramref name="targetType"/>, and
            if the <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/> property
            is <see langword="true"/>.
            </p>
            <p>
            Invoked immediately <b>before</b> any potential running of the
            advice, and <b>after</b> any advice earlier in the advice chain has
            run.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <param name="args">The arguments to the method</param>
            <returns>
            <see langword="true"/> if there is a runtime match.</returns>
        </member>
        <member name="P:Spring.Aop.IMethodMatcher.IsRuntime">
            <summary>
            Is this <see cref="T:Spring.Aop.IMethodMatcher"/> dynamic?
            </summary>
            <remarks>
            <p>
            If <see langword="true"/>, the three argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
            method will be invoked if the two argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
            method returns <see langword="true"/>.
            </p>
            <p>
            Note that this property can be checked when an AOP proxy is created,
            and implementations need not check the value of this property again
            before each method invocation.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this
            <see cref="T:Spring.Aop.IMethodMatcher"/> is dynamic.
            </value>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            Always throws a <see cref="T:System.NotSupportedException"/>. This
            method should never be called on a static matcher.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <param name="args">The arguments to the method</param>
            <returns>
            Always throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Always.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            Must be implemented by a derived class in order to specify matching
            rules.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcher.IsRuntime">
            <summary>
            Is this <see cref="T:Spring.Aop.IMethodMatcher"/> dynamic?
            </summary>
            <remarks>
            <p>
            Always returns <see langword="false"/>.
            </p>
            </remarks>
            <value>
            Always returns <see langword="false"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.IPointcut">
            <summary>
            Spring.NET's core pointcut abstraction.
            </summary>
            <remarks>
            <p>
            A pointcut is composed of <see cref="T:Spring.Aop.ITypeFilter"/>s and
            <see cref="T:Spring.Aop.IMethodMatcher"/>s. Both these basic terms and an
            <see cref="T:Spring.Aop.IPointcut"/> itself can be combined to build up
            sophisticated combinations.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="P:Spring.Aop.IPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.IPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcherPointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.ITypeFilter">
            <summary>
            A filter that restricts the matching of a pointcut or introduction to
            a given set of target types.
            </summary>
            <remarks>
            <p>
            Can be used as part of a pointcut, or for the entire targeting of an
            introduction.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IPointcut"/>
            <seealso cref="F:Spring.Aop.TrueTypeFilter.True"/>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.ITypeFilter.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/>
            class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
            <exception cref="T:AopAlliance.Aop.AspectException">
            If an error was encountered during the deserialization process.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.InitPatternRepresentation(System.String[])">
            <summary>
            Subclasses must implement this to initialize regular expression pointcuts.
            </summary>
            <remarks>
            <p>
            Can be invoked multiple times.
            </p>
            <p>
            This method will be invoked from the <see cref="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Patterns"/> property,
            and also on deserialization.
            </p>
            </remarks>
            <param name="patterns">
            The patterns to initialize.
            </param>
            <exception cref="T:System.ArgumentException">
            In the case of an invalid pattern.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Matches(System.String,System.Int32)">
            <summary>
            Does the pattern at the supplied <paramref name="patternIndex"/>
            match this <paramref name="pattern"/>?
            </summary>
            <param name="pattern">The pattern to match</param>
            <param name="patternIndex">The index of pattern.</param>
            <returns>
            <see langword="true"/> if there is a match.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            Try to match the regular expression against the fully qualified name
            of the method's declaring <see cref="T:System.Type"/>, plus the name of
            the supplied <paramref name="method"/>.
            </p>
            <p>
            Note that the declaring <see cref="T:System.Type"/> is that
            <see cref="T:System.Type"/> that originally declared
            the method, not necessarily the <see cref="T:System.Type"/> that is
            currently exposing it. For example, <see cref="M:System.Object.Equals(System.Object)"/>
            matches any subclass of <see cref="T:System.Object"/>'s
            <see cref="M:System.Object.Equals(System.Object)"/> method.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <remarks>
            <p>
            In this instance, simply returns <see langword="true"/>.
            </p>
            </remarks>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Pattern">
            <summary>
            Convenience property for setting a single pattern.
            </summary>
            <remarks>
            Use this property or Patterns, not both.
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Patterns">
            <summary>
            The regular expressions defining methods to match.
            </summary>
            <remarks>
            Matching will be the union of all these; if any match,
            the pointcut matches.
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.AopUtils">
            <summary>
            Utility methods used by the AOP framework.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.AopUtils.IsAopProxy(System.Object)">
            <summary>
            Is the supplied <paramref name="instance"/> an AOP proxy?
            </summary>
            <param name="instance">The instance to be checked.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="instance"/> is
            an AOP proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AopUtils.GetAllInterfaces(System.Object)">
            <summary>
            Gets all of the interfaces that the <see cref="T:System.Type"/> of the
            supplied <paramref name="instance"/> implements.
            </summary>
            <remarks>
            <p>
            This includes interfaces implemented by any superclasses.
            </p>
            </remarks>
            <param name="instance">
            The object to analyse for interfaces.
            </param>
            <returns>
            All of the interfaces that the <see cref="T:System.Type"/> of the
            supplied <paramref name="instance"/> implements; or an empty
            array if the supplied <paramref name="instance"/> is
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AopUtils.CanApply(Spring.Aop.IPointcut,System.Type,System.Type[])">
            <summary> 
            Can the supplied <paramref name="pointcut"/> apply at all on the
            supplied <paramref name="targetType"/>?
            </summary>
            <remarks>
            <p>
            This is an important test as it can be used to optimize out a
            pointcut for a class.
            </p>
            <p>
            Invoking this method with a <paramref name="targetType"/> that is
            an interface type will always yield a <see langword="false"/>
            return value.
            </p>
            </remarks>
            <param name="pointcut">The pointcut being tested.</param>
            <param name="targetType">The class being tested.</param>
            <param name="proxyInterfaces">
            The interfaces being proxied. If <see langword="null"/>, all
            methods on a class may be proxied.
            </param>
            <returns>
            <see langword="true"/> if the pointcut can apply on any method.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AopUtils.CanApply(Spring.Aop.IAdvisor,System.Type,System.Type[])">
            <summary> 
            Can the supplied <paramref name="advisor"/> apply at all on the
            supplied <paramref name="targetType"/>?
            </summary>
            <remarks>
            <p>
            This is an important test as it can be used to optimize out an
            advisor for a class.
            </p>
            </remarks>
            <param name="advisor">The advisor to check.</param>
            <param name="targetType">The class being tested.</param>
            <param name="proxyInterfaces">
            The interfaces being proxied. If <see langword="null"/>, all
            methods on a class may be proxied.
            </param>
            <returns>
            <see langword="true"/> if the advisor can apply on any method.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AopUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AopUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.AttributeMatchMethodPointcut">
            <summary> 
            <see cref="T:Spring.Aop.IPointcut"/> implementation that matches methods
            that have been decorated with a specified <see cref="T:System.Attribute"/>.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcut"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcut"/> class.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Attribute"/> to match.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.#ctor(System.Type,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcut"/>
            class.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Attribute"/> to match.
            </param>
            <param name="inherit">
            Flag that controls whether or not the inheritance tree of the
            method to be included in the search for the <see cref="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute"/>?
            </param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute">
            <summary>
            The <see cref="T:System.Attribute"/> to match.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the supplied value is not a <see cref="T:System.Type"/> that
            derives from the <see cref="T:System.Attribute"/> class.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Inherit">
            <summary>
            Is the inheritance tree of the method to be included in the search for the
            <see cref="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute"/>?
            </summary>
            <remarks>
            <p>
            The default is <see langword="true"/>.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor">
            <summary> 
            Convenient class for attribute-match method pointcuts that hold an Interceptor,
            making them an Advisor.
            </summary>
            <author>Bruno Baia</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.IPointcutAdvisor">
            <summary>
            Superinterface for all <see cref="T:Spring.Aop.IAdvisor"/>s that are
            driven by a pointcut.
            </summary>
            <remarks>
            <p>
            This covers nearly all advisors except introduction advisors, for which
            method-level matching does not apply.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IIntroductionAdvisor"/>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.IAdvisor">
            <summary>
            Base interface holding AOP advice and a filter determining the
            applicability of the advice (such as a pointcut).
            </summary>
            <remarks>
            <note>
            This interface is not for use by Spring.NET users, but exists rather to
            allow for commonality in the support for different types of advice
            within the framework.
            </note>
            <p>
            Spring.NET AOP is centered on <b>around advice</b> delivered via method
            <b>interception</b>, compliant with the AOP Alliance interception API. 
            The <see cref="T:Spring.Aop.IAdvisor"/> interface allows support for
            different types of advice, such as <b>before</b> and <b>after</b>
            advice, which need not be implemented using interception.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IMethodBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IAfterReturningAdvice"/>
            <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="P:Spring.Aop.IAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <remarks>
            <p>
            An advisor that was creating a mixin would be a per instance
            operation and would thus return <see langword="true"/>. If the
            advisor is not per instance, it is shared with all instances of the
            advised class obtained from the same Spring.NET IoC container.
            </p>
            <p>
            Use <c>singleton</c> and <c>prototype</c> object definitions or
            appropriate programmatic proxy creation to ensure that
            <see cref="T:Spring.Aop.IAdvisor"/>s have the correct lifecycle model. 
            </p>
            <note>
            This method is not currently used by the framework.
            </note>
            </remarks>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
        </member>
        <member name="P:Spring.Aop.IAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <remarks>
            <p>
            An advice may be an interceptor, a throws advice, before advice,
            introduction etc.
            </p>
            </remarks>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
        </member>
        <member name="P:Spring.Aop.IPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor"/> class
            for the supplied <paramref name="advice"/>.
            </summary>
            <param name="advice"></param>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">
            Always; this property is not yet supported.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this advisor.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.ComposablePointcut">
            <summary>
            Convenient class for building up pointcuts.
            </summary>
            <remarks>
            <p>
            All methods return a <see cref="T:Spring.Aop.Support.ComposablePointcut"/>
            instance, which facilitates the following concise usage pattern...
            </p>
            <code language="C#">
            IPointcut pointcut = new ComposablePointcut()
            		.Union(typeFilter)
            			.Intersection(methodMatcher)
            				.Intersection(pointcut);
            </code>
            <p>
            There is no <c>Union()</c> method on this class. Use the
            <see cref="M:Spring.Aop.Support.Pointcuts.Union(Spring.Aop.IPointcut,Spring.Aop.IPointcut)"/> method for such functionality.
            </p>
            </remarks> 
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Aop.Support.ComposablePointcut"/> class
            that matches all the methods on all <see cref="T:System.Type"/>s.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.#ctor(Spring.Aop.ITypeFilter,Spring.Aop.IMethodMatcher)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Aop.Support.ComposablePointcut"/> class
            that uses the supplied <paramref name="typeFilter"/> and
            <paramref name="methodMatcher"/>.
            </summary>
            <param name="typeFilter">
            The type filter to use.
            </param>
            <param name="methodMatcher">
            The method matcher to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Union(Spring.Aop.ITypeFilter)">
            <summary>
            Changes the current type filter to be the union of the existing filter and the
            supplied <paramref name="filter"/>.
            </summary>
            <param name="filter">The filter to union with.</param>
            <returns>
            The union of the existing filter and the supplied <paramref name="filter"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Intersection(Spring.Aop.ITypeFilter)">
            <summary>
            Changes the current type filter to be the intersection of the existing filter
            and the supplied <paramref name="filter"/>.
            </summary>
            <param name="filter">The filter to diff against.</param>
            <returns>
            The intersection of the existing filter and the supplied <paramref name="filter"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Union(Spring.Aop.IMethodMatcher)">
            <summary>
            Changes the current method matcher to be the union of the existing matcher and the
            supplied <paramref name="matcher"/>.
            </summary>
            <param name="matcher">The matcher to union with.</param>
            <returns>
            The union of the existing matcher and the supplied <paramref name="matcher"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Intersection(Spring.Aop.IMethodMatcher)">
            <summary>
            Changes the current method matcher to be the intersection of the existing matcher
            and the supplied <paramref name="matcher"/>.
            </summary>
            <param name="matcher">The matcher to diff against.</param>
            <returns>
            The intersection of the existing matcher and the supplied <paramref name="matcher"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Intersection(Spring.Aop.IPointcut)">
            <summary>
            Changes current pointcut to intersection of the current and supplied pointcut
            </summary>
            <param name="other">pointcut to diff against</param>
            <returns>updated pointcut</returns>
        </member>
        <member name="P:Spring.Aop.Support.ComposablePointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.ComposablePointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.Support.ControlFlowPointcut">
            <summary>
            Pointcut and method matcher for use in simple <b>cflow</b>-style
            pointcuts.
            </summary>
            <remarks>
            <p>
            Evaluating such pointcuts is slower than evaluating normal pointcuts,
            but can nevertheless be useful in some cases. Of course, your mileage
            may vary as to what 'slower' actually means.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Simon White (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Support.ControlFlowPointcut"/>
            class.
            </summary>
            <param name="type">
            The class under which <b>all</b> control flows are to be matched.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.#ctor(System.Type,System.String)">
            <summary>
            Construct a new pointcut that matches all calls below the
            given method in the given class.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="methodName"/> is
            <see langword="null"/>, <b>all</b> control flows below the given
            class will be successfully matched.
            </p>
            </remarks>
            <param name="type">
            The class under which <b>all</b> control flows are to be matched.
            </param>
            <param name="methodName">
            The method name under which <b>all</b> control flows are to be matched.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied <see cref="T:System.Type"/>?
            </summary>
            <remarks>
            <p>
            Subclasses are encouraged to override this method for greater
            filtering (and performance).
            </p>
            <p>
            This, the default, implementation always matches (returns
            <see langword="true"/>).
            </p>
            </remarks>
            <param name="type">The candidate target class.</param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            Perform static checking. If this returns false, or if the isRuntime() method
            returns false, no runtime check will be made.
            </summary>
            <remarks>
            <p>
            Subclasses are encouraged to override this method if it is possible
            to filter out some candidate classes.
            </p>
            <p>
            This, the default, implementation always matches (returns
            <see langword="true"/>). This means that the three argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
            method will always be invoked.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target class (may be <see langword="null"/>, in which case the
            candidate class must be taken to be the <paramref name="method"/>'s
            declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            Subclasses are encouraged to override this method if it is possible
            to filter out some candidate classes.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">The target class.</param>
            <param name="args">The arguments to the method</param>
            <returns>
            <see langword="true"/> if there is a runtime match.</returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
        </member>
        <member name="P:Spring.Aop.Support.ControlFlowPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.ControlFlowPointcut.EvaluationCount">
            <summary>
            Gets the number of times this pointcut has been <i>evaluated</i>.
            </summary>
            <remarks>
            <p>
            Useful as a debugging aid.
            </p>
            <p>
            Note that this value is distinct from the number of times that this
            pointcut sucessfully matches a target method, in that a
            <see cref="T:Spring.Aop.Support.ControlFlowPointcut"/> may be evaluated many times but
            never actually match even once.
            </p>
            </remarks>
            <value>
            The number of times this pointcut has been <i>evaluated</i>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.ControlFlowPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.ControlFlowPointcut.IsRuntime">
            <summary>
            Is this a runtime pointcut?
            </summary>
            <remarks>
            <p>
            This implementation is a runtime pointcut, and so always returns
            <see langword="true"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this is a runtime pointcut.
            </value>
            <seealso cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/>
        </member>
        <member name="T:Spring.Aop.Support.DefaultIntroductionAdvisor">
            <summary>
            Simple <seealso cref="T:Spring.Aop.IIntroductionAdvisor"/> implementation that
            by default applies to any class.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.IIntroductionAdvisor">
            <summary>
            Superinterface for advisors that perform one or more AOP
            <b>introductions</b>.
            </summary>
            <remarks>
            <p>
            This interface cannot be implemented directly; subinterfaces must
            provide the advice type implementing the introduction.
            </p>
            <p>
            Introduction is the implementation of additional interfaces (not
            implemented by a target) via AOP advice.
            </p>
            </remarks>
            <seealso cref="T:Spring.Aop.IIntroductionInterceptor"/>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.IIntroductionAdvisor.ValidateInterfaces">
            <summary>
            Can the advised interfaces be implemented by the introduction
            advice?
            </summary>
            <remarks>
            <p>
            Invoked <b>before</b> adding an
            <seealso cref="T:Spring.Aop.IIntroductionAdvisor"/>.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the advised interfaces cannot be implemented by the introduction
            advice.
            </exception>
            <seealso cref="P:Spring.Aop.IIntroductionAdvisor.Interfaces"/>
        </member>
        <member name="P:Spring.Aop.IIntroductionAdvisor.TypeFilter">
            <summary>
            Returns the filter determining which target classes this
            introduction should apply to. 
            </summary>
            <remarks>
            <p>
            This is the <see cref="T:System.Type"/> part of a pointcut.
            Be advised that method matching doesn't make sense in the context
            of introductions.
            </p>
            </remarks>
            <value>
            The filter determining which target classes this introduction
            should apply to. 
            </value>
        </member>
        <member name="P:Spring.Aop.IIntroductionAdvisor.Interfaces">
            <summary>
            Gets the interfaces introduced by this
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </summary>
            <value>
            The interfaces introduced by this
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </value>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultIntroductionAdvisor"/> class using
            the supplied <paramref name="introduction"/>
            </summary>
            <remarks>
            <p>
            This constructor adds all interfaces implemented by the supplied
            <paramref name="introduction"/> (except the
            <see cref="T:AopAlliance.Aop.IAdvice"/> interface) to the list of
            interfaces to introduce.
            </p>
            </remarks>
            <param name="introduction">The introduction to use.</param>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.#ctor(AopAlliance.Aop.IAdvice,System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultIntroductionAdvisor"/> class using
            the supplied <paramref name="introduction"/>
            </summary>
            <param name="introduction">The introduction to use.</param>
            <param name="intf">
            The interface to introduce.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.#ctor(AopAlliance.Aop.IAdvice,System.Type[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultIntroductionAdvisor"/> class using
            the supplied <paramref name="introduction"/>
            </summary>
            <param name="introduction">The introduction to use.</param>
            <param name="interfaces">
            The interfaces to introduce.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="introduction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.AddInterface(System.Type)">
            <summary>
            Adds the supplied <paramref name="intf"/> to the list of
            introduced interfaces.
            </summary>
            <param name="intf">The interface to add.</param>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="P:Spring.Aop.Support.DefaultIntroductionAdvisor.Interfaces"/> are not interface <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <remarks>
            <p>
            This, the default, implementation always returns <see langword="true"/>.
            </p>
            </remarks>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.ValidateInterfaces">
            <summary>
            Can the advised interfaces be implemented by the introduction
            advice?
            </summary>
            <remarks>
            <p>
            Invoked <b>before</b> adding an
            <seealso cref="T:Spring.Aop.IIntroductionAdvisor"/>.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the advised interfaces cannot be implemented by the introduction
            advice.
            </exception>
            <seealso cref="P:Spring.Aop.IIntroductionAdvisor.Interfaces"/>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="P:Spring.Aop.Support.DefaultIntroductionAdvisor.Interfaces"/> are not interface <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.DefaultIntroductionAdvisor.TypeFilter">
            <summary>
            Returns the filter determining which target classes this
            introduction should apply to. 
            </summary>
            <value>
            The filter determining which target classes this introduction
            should apply to. 
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DefaultIntroductionAdvisor.Interfaces">
            <summary>
            Gets the interfaces introduced by this
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </summary>
            <value>
            The interfaces introduced by this
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DefaultIntroductionAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <remarks>
            <p>
            Default for an introduction is per-instance interception.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DefaultIntroductionAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
        </member>
        <member name="T:Spring.Aop.Support.DefaultPointcutAdvisor">
            <summary>
            Convenient pointcut-driven advisor implementation.
            </summary>
            <remarks>
            <p>
            This is the most commonly used <see cref="T:Spring.Aop.IAdvisor"/> implementation.
            It can be used with any pointcut and advice type, except for introductions.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            class for the supplied <paramref name="advice"/>,
            </summary>
            <param name="advice">
            The advice to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.#ctor(Spring.Aop.IPointcut,AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            class for the supplied <paramref name="advice"/> and
            <paramref name="pointcut"/>.
            </summary>
            <param name="advice">
            The advice to use.
            </param>
            <param name="pointcut">
            The pointcut to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.  
            </summary>
            <param name="o">The advisor to compare with.</param>
            <returns>
            <see langword="true"/> if this instance is equal to the
            specified <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of this advisor.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.DefaultPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <remarks>
            <p>
            Not supported for dynamic advisors.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">Always.</exception>
            <see cref="P:Spring.Aop.IAdvisor.IsPerInstance"/>
        </member>
        <member name="P:Spring.Aop.Support.DefaultPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.DefaultPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this advisor.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="P:Spring.Aop.Support.DefaultPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.DelegatingIntroductionInterceptor">
            <summary>
            This class in not useful in the Spring.NET AOP Implementation.
            </summary>
            <remarks>
            Quoted from Aleks:
            Yes, I removed DII as introductions work little bit differently in .Net version
            so it wasn't necessary anymore.
            
            Basically, you use AdvisedSupport.AddIntroduction to add introduction to a target
            object and AdvisedSupport.AddAdvisor() to add interceptor. AdvisedSupport keeps
            internal map of interfaces that are introduced and which introduction they map to.
            This way, when proxy is created, it gets a reference either to target object or
            appropriate introduction, based on the interface for which proxy methods are
            generated.
            
            This also means that introductions are not kept in the interceptor chain anymore,
            which allows for some significant performace optimizations -- when you call method
            that has no interceptors, direct call is used instead of reflection regardless of
            whether target method is on the target object itself or one of the introductions.
            This means that introduced methods perform the same as target object methods,
            which could be useful for adding introductions to fine grained objects.
            
            Because introductions are not part of the interceptor chain anymore, there is no
            need for DelegatingIntroductionInterceptor, so there should be no tests for it
            either.
            
            Here is the simplest example possible of programmatic AOP proxy creation:
            
              factory = new ProxyFactory(new Target());
              factory.AddIntroduction(new DefaultIntroductionAdvisor(new Introduction()));
              factory.AddInterceptor(new Interceptor());
              Object proxy = factory.GetProxy();
            
            In this case, DefaultIntroductionAdvisor constructor will use reflection to get a
            list of all interfaces to introduce. You can also specify specific interface
            type(s) as a second parameter to a constructor. Take a look at ProxyTest project
            for more examples and sample classes.
            
            Introductions are for now required to implement IAdvice marker interface, although
            even that requirement is superficial and could be easily removed.
            
            Hope this helps with your introduction-related problems.
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.DynamicMethodMatcher">
            <summary>
            Convenient abstract superclass for dynamic method matchers that do
            care about arguments at runtime.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcher.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DynamicMethodMatcher"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            Derived classes can override this method to add preconditions for
            dynamic matching.
            </p>
            <p>
            This implementation always returns <see langword="true"/>.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            Must be overriden by derived classes to provide criteria for dynamic matching.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <param name="args">The arguments to the method</param>
            <returns>
            <see langword="true"/> if there is a runtime match.</returns>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcher.IsRuntime">
            <summary>
            Is this <see cref="T:Spring.Aop.IMethodMatcher"/> dynamic?
            </summary>
            <value>
            Always returns <see langword="true"/>, to specify that this is a
            dynamic matcher.
            </value>
        </member>
        <member name="T:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor">
            <summary>
            Convenient superclass for <see cref="T:Spring.Aop.IAdvisor"/>s
            that are also dynamic pointcuts.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor"/>
            class for the supplied <paramref name="advice"/>.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
            <param name="advice">
            The advice portion of this advisor.
            </param>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <remarks>
            <p>
            Not supported for dynamic advisors.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">Always.</exception>
            <see cref="P:Spring.Aop.IAdvisor.IsPerInstance"/>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <remarks>
            <p>
            This implementation always returns a filter that evaluates to <see langword="true"/>
            for any <see cref="T:System.Type"/>.
            </p>
            </remarks>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <remarks>
            <p>
            This implementation always returns itself (this object).
            </p>
            </remarks>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
            <remarks>
            <p>
            This implementation always returns itself (this object).
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.MethodMatchers">
            <summary>
            Various utility methods relating to the composition of
            <see cref="T:Spring.Aop.IMethodMatcher"/>s.
            </summary>
            <remarks>
            <p>
            A method matcher may be evaluated statically (based on method and target
            class) or need further evaluation dynamically (based on arguments at
            the time of method invocation).
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.MethodMatchers.Union(Spring.Aop.IMethodMatcher,Spring.Aop.IMethodMatcher)">
            <summary>
            Creates a new <see cref="T:Spring.Aop.IMethodMatcher"/> that is the
            union of the two supplied <see cref="T:Spring.Aop.IMethodMatcher"/>s.
            </summary>
            <remarks>
            <p>
            The newly created matcher will match all the methods that either of the two 
            supplied matchers would match.
            </p>
            </remarks>
            <param name="firstMatcher">The first method matcher.</param>
            <param name="secondMatcher">The second method matcher.</param>
            <returns>
            A new <see cref="T:Spring.Aop.IMethodMatcher"/> that is the
            union of the two supplied <see cref="T:Spring.Aop.IMethodMatcher"/>s
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.MethodMatchers.Intersection(Spring.Aop.IMethodMatcher,Spring.Aop.IMethodMatcher)">
            <summary>
            Creates a new <see cref="T:Spring.Aop.IMethodMatcher"/> that is the
            intersection of the two supplied <see cref="T:Spring.Aop.IMethodMatcher"/>s.
            </summary>
            <remarks>
            <p>
            The newly created matcher will match only those methods that both
            of the supplied matchers would match.
            </p>
            </remarks>
            <param name="firstMatcher">The first method matcher.</param>
            <param name="secondMatcher">The second method matcher.</param>
            <returns>
            A new <see cref="T:Spring.Aop.IMethodMatcher"/> that is the
            intersection of the two supplied <see cref="T:Spring.Aop.IMethodMatcher"/>s
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.MethodMatchers.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.MethodMatchers"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.NameMatchMethodPointcut">
            <summary> 
            Pointcut object for simple method name matches, useful as an alternative to pure
            regular expression based patterns.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.NameMatchMethodPointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the <see cref="P:System.Reflection.MemberInfo.Name"/> of the supplied
            <paramref name="method"/> matches any of the mapped names?
            </summary>
            <param name="method">
            The <see cref="T:System.Reflection.MethodBase"/> to check.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target class.
            </param>
            <returns>
            <see langword="true"/> if the name of the supplied
            <paramref name="method"/> matches one of the mapped names.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.NameMatchMethodPointcut.IsMatch(System.String,System.String)">
            <summary>
            Does the supplied <paramref name="methodName"/> match the supplied
            <paramref name="mappedName"/>?
            </summary>
            <remarks>
            <p>
            The default implementation checks for "xxx*" and "*xxx" matches.
            </p>
            </remarks>
            <param name="methodName">
            The method name of the class.
            </param>
            <param name="mappedName">
            The name in the descriptor.
            </param>
            <returns>
            <b>True</b> if the names match.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcut.MappedName">
            <summary>
            Convenience property when we have only a single method name
            to match.
            </summary>
            <remarks>
            <note type="caution">
            Use either this property or the
            <see cref="P:Spring.Aop.Support.NameMatchMethodPointcut.MappedNames"/> property,
            not both.
            </note>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcut.MappedNames">
            <summary>
            Set the method names defining methods to match.
            </summary>
            <remarks>
            <p>
            Matching will be the union of all these; if any match, the pointcut matches.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.NameMatchMethodPointcutAdvisor">
            <summary> 
            Convenient class for name-match method pointcuts that hold an Interceptor,
            making them an Advisor.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.NameMatchMethodPointcutAdvisor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.NameMatchMethodPointcutAdvisor"/> class
            for the supplied <paramref name="advice"/>.
            </summary>
            <param name="advice"></param>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">
            Always; this property is not yet supported.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this advisor.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.Pointcuts">
            <summary> 
            Various <see cref="T:Spring.Aop.IPointcut"/> related utility methods.
            </summary>
            <remarks>
            <p>
            These methods are particularly useful for composing pointcuts
            using the union and intersection methods.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.Union(Spring.Aop.IPointcut,Spring.Aop.IPointcut)">
            <summary>
            Creates a union of the two supplied pointcuts.
            </summary>
            <param name="firstPointcut">The first pointcut.</param>
            <param name="secondPointcut">The second pointcut.</param>
            <returns>
            The union of the two supplied pointcuts.
            </returns>
            <seealso cref="T:Spring.Aop.Support.UnionPointcut"/>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.Intersection(Spring.Aop.IPointcut,Spring.Aop.IPointcut)">
            <summary>
            Creates an <see cref="T:Spring.Aop.IPointcut"/> that is the
            intersection of the two supplied pointcuts.
            </summary>
            <param name="firstPointcut">The first pointcut.</param>
            <param name="secondPointcut">The second pointcut.</param>
            <returns>
            An <see cref="T:Spring.Aop.IPointcut"/> that is the
            intersection of the two supplied pointcuts.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.Matches(Spring.Aop.IPointcut,System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Performs the least expensive check for a match.
            </summary>
            <param name="pointcut">
            The <see cref="T:Spring.Aop.IPointcut"/> to be evaluated.
            </param>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <param name="args">The arguments to the method</param>
            <returns><see langword="true"/> if there is a runtime match.</returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.AreEqual(Spring.Aop.IPointcut,Spring.Aop.IPointcut)">
            <summary>
            Are the supplied <see cref="T:Spring.Aop.IPointcut"/>s equal?
            </summary>
            <param name="firstPointcut">The first pointcut.</param>
            <param name="secondPointcut">The second pointcut.</param>
            <returns>
            <see langword="true"/> if the supplied <see cref="T:Spring.Aop.IPointcut"/>s
            are equal.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.Pointcuts"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor">
            <summary>
            Convenient class for regular expression method pointcuts that hold an
            <see cref="T:AopAlliance.Aop.IAdvice"/>, making them an
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </summary>
            <remarks>
            <p>
            Configure this class using the <see cref="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Pattern"/> and
            <see cref="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Patterns"/> pass-through properties. These are analogous
            to the <see cref="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Pattern"/> and
            <see cref="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Pattern"/>s properties of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/> class.
            </p>
            <p>
            Can delegate to any type of regular expression pointcut. Currently only
            pointcuts based on the regular expression classes from the .NET Base
            Class Library are supported. The
            <see cref="P:Spring.Aop.Support.DefaultPointcutAdvisor.Pointcut"/>
            property must be a subclass of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/> class.
            </p>
            <p>
            This should not normally be set directly.
            </p>
            </remarks>
            <author>Dmitriy Kopylenko</author>
            <author>Rod Johnson</author>
            <author>Simon White (.NET)</author>
            <see cref="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut"/>
        </member>
        <member name="M:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor"/>
            class for the supplied <paramref name="advice"/>.
            </summary><param name="advice">
            The target advice.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.InitPointcut">
            <summary>
            Initialises the pointcut.
            </summary>
        </member>
        <member name="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Pattern">
            <summary>
            A single pattern to be used during method evaluation.
            </summary>
        </member>
        <member name="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Patterns">
            <summary>
            Multiple patterns to be used during method evaluation.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.RootTypeFilter">
            <summary>
            Simple <see cref="T:Spring.Aop.ITypeFilter"/> implementation that matches
            all classes classes (and any derived subclasses) of a give root
            <see cref="T:System.Type"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.RootTypeFilter.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.RootTypeFilter"/> for the supplied
            <paramref name="rootType"/>.
            </summary>
            <param name="rootType">The root <see cref="T:System.Type"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="rootType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.RootTypeFilter.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <remarks>
            <p>
            Returns <see langword="true"/> if the supplied <paramref name="type"/>
            can be assigned to the root <see cref="T:System.Type"/>.
            </p>
            </remarks>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut">
            <summary>
            Regular expression based pointcut object.
            </summary>
            <remarks>
            <p>
            Uses the regular expression classes from the .NET Base Class Library.
            </p>
            <p>
            The regular expressions must be a match. For example, the
            <code>.*Get.*</code> pattern will match <c>Com.Mycom.Foo.GetBar()</c>, and
            <code>Get.*</code> will not.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.#ctor(System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut"/> class,
            using the supplied pattern or <paramref name="patterns"/>.
            </summary>
            <param name="patterns">
            The intial pattern value(s) to be matched against.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
            <exception cref="T:AopAlliance.Aop.AspectException">
            If an error was encountered during the deserialization process.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.InitPatternRepresentation(System.String[])">
            <summary>
            Initializes the regular expression pointcuts.
            </summary>
            <remarks>
            <p>
            Can be invoked multiple times.
            </p>
            <p>
            This method will be invoked from the
            <see cref="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Patterns"/> property,
            and also on deserialization.
            </p>
            </remarks>
            <param name="patterns">
            The patterns to initialize.
            </param>
            <exception cref="T:System.ArgumentException">
            In the case of an invalid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="patterns"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.Matches(System.String,System.Int32)">
            <summary>
            Does the pattern at the supplied <paramref name="patternIndex"/>
            match this <paramref name="pattern"/>?
            </summary>
            <param name="pattern">The pattern to match</param>
            <param name="patternIndex">The index of pattern.</param>
            <returns>
            <see langword="true"/> if there is a match.
            </returns>
        </member>
        <member name="T:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor">
            <summary>
            Convenient superclass for <see cref="T:Spring.Aop.IAdvisor"/>s that
            are also static pointcuts.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/>
            class for the supplied <paramref name="advice"/>
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
            <param name="advice">
            The advice to use.
            </param>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">
            Always; this property is not yet supported.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this advisor.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.TypeFilters">
            <summary>
            Defines miscellaneous <see cref="T:System.Type"/> filter operations.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.TypeFilters.Union(Spring.Aop.ITypeFilter,Spring.Aop.ITypeFilter)">
            <summary>
            Creates a union of two <see cref="T:System.Type"/> filters.
            </summary>
            <remarks>
            <p>
            The filter arising from the union will match all of the
            <see cref="T:System.Type"/> that either of the two supplied filters
            would match.
            </p>
            </remarks>
            <param name="first">
            The first <see cref="T:System.Type"/> filter.
            </param>
            <param name="second">
            The second <see cref="T:System.Type"/> filter.
            </param>
            <returns>
            The union of the supplied <see cref="T:System.Type"/> filters.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.TypeFilters.Intersection(Spring.Aop.ITypeFilter,Spring.Aop.ITypeFilter)">
            <summary>
            Creates the intersection of two <see cref="T:System.Type"/> filters.
            </summary>
            <remarks>
            <p>
            The filter arising from the intersection will match all of the
            <see cref="T:System.Type"/> that both of the two supplied filters
            would match.
            </p>
            </remarks>
            <param name="first">
            The first <see cref="T:System.Type"/> filter.
            </param>
            <param name="second">
            The second <see cref="T:System.Type"/> filter.
            </param>
            <returns>
            The intersection of the supplied <see cref="T:System.Type"/> filters.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.TypeFilters.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.TypeFilters"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.TypeFilters.UnionTypeFilter">
            <summary>
            Union class filter implementation.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.TypeFilters.IntersectionTypeFilter">
            <summary>
            Intersection <see cref="T:Spring.Aop.ITypeFilter"/> implementation.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.UnionPointcut">
            <summary> 
            A <see cref="T:Spring.Aop.IPointcut"/> union.
            </summary>
            <remarks>
            <p>
            Such pointcut unions are tricky, because one cannot simply <c>OR</c>
            the respective <see cref="T:Spring.Aop.IMethodMatcher"/>s: one has to
            ascertain that each <see cref="T:Spring.Aop.IMethodMatcher"/>'s
            <see cref="P:Spring.Aop.IPointcut.TypeFilter"/> is also satisfied.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Support.UnionPointcut.#ctor(Spring.Aop.IPointcut,Spring.Aop.IPointcut)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.UnionPointcut"/> class.
            </summary>
            <param name="firstPointcut">The first pointcut.</param>
            <param name="secondPointcut">The second pointcut.</param>
        </member>
        <member name="P:Spring.Aop.Support.UnionPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.UnionPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.Support.UnionPointcut.PointcutUnionMethodMatcher">
            <summary>
            Internal method matcher class for union pointcut.
            </summary>
        </member>
        <member name="T:Spring.Aop.Target.AbstractPoolingTargetSource">
            <summary>
            Abstract superclass for pooling <see cref="T:Spring.Aop.ITargetSource"/>s.
            </summary>
            <remarks>
            <p>
            Maintains a pool of target instances, acquiring and releasing a target
            object from the pool for each method invocation. 
            </p>
            <p>
            This class is independent of pooling technology.
            </p>
            <p>
            Subclasses must implement the
            <see cref="M:Spring.Aop.Target.AbstractPoolingTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.AbstractPoolingTargetSource.ReleaseTarget(System.Object)"/>
            methods to work with their chosen pool. The
            <see cref="M:Spring.Aop.Target.AbstractPrototypeTargetSource.NewPrototypeInstance"/>
            method inherited from the
            <see cref="T:Spring.Aop.Target.AbstractPrototypeTargetSource"/> base class
            can be used to create objects to put in the pool. Subclasses must also
            implement some of the monitoring methods from the
            <see cref="T:Spring.Aop.Target.PoolingConfig"/> interface. This class
            provides the
            <see cref="M:Spring.Aop.Target.AbstractPoolingTargetSource.GetPoolingConfigMixin"/>
            method to return an <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            making these statistics available on proxied objects.
            </p>
            <p>
            This class implements the <see cref="T:System.IDisposable"/> interface in
            order to force subclasses to implement the
            <see cref="M:System.IDisposable.Dispose"/> method to cleanup and close
            down their pool.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.Target.AbstractPrototypeTargetSource">
            <summary>
            Base class for dynamic <see cref="T:Spring.Aop.ITargetSource"/>
            implementations that can create new prototype object instances to
            support a pooling or new-instance-per-invocation strategy.
            </summary>
            <remarks>
            <p>
            All such <see cref="T:Spring.Aop.ITargetSource"/>s must run in an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, as they need to
            call the <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            method to create a new prototype instance.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.ITargetSource">
            <summary>
            Used to obtain the current "target" of an AOP invocation
            </summary>
            <remarks>
            <p>
            This target will be invoked via reflection if no around advice chooses
            to end the interceptor chain itself.
            </p>
            <p>
            If an <see cref="T:Spring.Aop.ITargetSource"/> is <c>"static"</c>, it
            will always return the same target, allowing optimizations in the AOP
            framework. Dynamic target sources can support pooling, hot swapping etc.
            </p>
            <p>
            Application developers don't usually need to work with target sources
            directly: this is an AOP framework interface.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.ITargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.ITargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <param name="target">The target object to release.</param>
        </member>
        <member name="P:Spring.Aop.ITargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.ITargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="true"/> if the target source is static.
            </value>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.AbstractPrototypeTargetSource"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.NewPrototypeInstance">
            <summary>
            Subclasses should use this method to create a new prototype instance.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <param name="target">The target object to release.</param>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            interfaces).
            </summary>
            <remarks>
            <p>
            Ensures that the <see cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetObjectName"/> property has been
            set to a valid value (i.e. is not <see langword="null"/> or a string
            that consists solely of whitespace).
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
        </member>
        <member name="F:Spring.Aop.Target.AbstractPrototypeTargetSource.logger">
            <summary>
            The shared <see cref="T:log4net.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetObjectName">
            <summary>
            The name of the target object to be created on each invocation.
            </summary>
            <remarks>
            <p>
            This object should be a prototype, or the same instance will always
            be obtained from the owning <see cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.ObjectFactory"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPrototypeTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="true"/> if the target source is static.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPrototypeTargetSource.ObjectFactory">
            <summary>
            The target factory that will be used to perform the lookup
            of the object referred to by the <see cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetObjectName"/>
            property.
            </summary>
            <remarks>
            <p>
            Needed so that prototype instances can be created as necessary.
            </p>
            </remarks>
            <value>
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (will never be <see langword="null"/>).
            </value>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="T:Spring.Aop.Target.PoolingConfig">
            <summary>
            Configuration interface for a pooling invoker.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="P:Spring.Aop.Target.PoolingConfig.Active">
            <summary>
            The number of active object instances in a pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.PoolingConfig.Free">
            <summary>
            The number of free object instances in a pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.PoolingConfig.MaxSize">
            <summary>
            The maximum number of object instances in a pool.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.AbstractPoolingTargetSource"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.GetTarget">
            <summary>
            Returns the target object (acquired from the pool).
            </summary>
            <returns>The target object (acquired from the pool).</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.GetPoolingConfigMixin">
            <summary>
            Gets the <see cref="T:Spring.Aop.Target.PoolingConfig"/> mixin.
            </summary>
            <returns>
            An <see cref="T:Spring.Aop.IIntroductionAdvisor"/> exposing statistics
            about the pool maintained by this object.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.CreatePool(Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Create the pool.
            </summary>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, in
            case one needs collaborators from it (normally one's own properties
            are sufficient).
            </param>
            <exception cref="T:System.Exception">
            In the case of errors encountered during the creation of the pool.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object (returns it to the pool).
            </summary>
            <param name="target">
            The target object to release (return to the pool).
            </param>
            <exception cref="T:System.Exception">
            In the case that the <paramref name="target"/> could not be released.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <remarks>
            <p>
            Disposes of the pool. 
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPoolingTargetSource.MaxSize">
            <summary>
            The maximum number of object instances in this pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPoolingTargetSource.Active">
            <summary>
            The number of active object instances in this pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPoolingTargetSource.Free">
            <summary>
            The number of free object instances in this pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPoolingTargetSource.ObjectFactory">
            <summary>
            The target factory that will be used to perform the lookup
            of the object referred to by the
            <see cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetObjectName"/>
            property.
            </summary>
            <value>
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (will never be <see langword="null"/>).
            </value>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
            <seealso cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.ObjectFactory"/>
        </member>
        <member name="T:Spring.Aop.Target.EmptyTargetSource">
            <summary>
            The <see cref="T:Spring.Aop.ITargetSource"/> to be used
            when there is no target object, and behavior is supplied by the
            advisors.
            </summary>
            <remarks>
            <p>
            This class is exposed as a singleton.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="F:Spring.Aop.Target.EmptyTargetSource.Empty">
            <summary>
            The <see cref="T:Spring.Aop.ITargetSource"/> to be used
            when there is no target object, and behavior is supplied by the
            advisors.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.EmptyTargetSource"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <remarks>
            <note type="implementnotes">
            This is a no-op operation in this implementation.
            </note>
            </remarks>
            <param name="target">The target object to release.</param>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.ITargetSource"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.ITargetSource"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Aop.Target.EmptyTargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.EmptyTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <remarks>
            <p>
            The <see cref="F:Spring.Aop.Target.EmptyTargetSource.Empty"/>
            instance is static, and this always returns <see langword="true"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if the target source is static.
            </value>
        </member>
        <member name="T:Spring.Aop.Target.HotSwappableTargetSource">
            <summary>
            <see cref="T:Spring.Aop.ITargetSource"/> implementation that caches a
            local target object, but allows the target to be swapped while the
            application is running
            </summary>
            <remarks>
            <p>
            If configuring an object of this class in a Spring IoC container,
            use constructor injection to supply the intial target.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.#ctor(System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.HotSwappableTargetSource"/> with the initial target.
            </summary>
            <param name="initialTarget">
            The initial target. May be <see langword="null"/>.
            </param>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <remarks>
            <p>
            No-op implementation.
            </p>
            </remarks>
            <param name="target">The target object to release.</param>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.Swap(System.Object)">
            <summary>
            Swap the target, returning the old target.
            </summary>
            <param name="newTarget">The new target.</param>
            <returns>The old target.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the new target is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.  
            </summary>
            <remarks>
            <p>
            Two invoker interceptors are equal if they have the same target or
            if the targets are equal.
            </p>
            </remarks>
            <param name="other">The target source to compare with.</param>
            <returns>
            <see langword="true"/> if this instance is equal to the
            specified <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Aop.Target.HotSwappableTargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
            <remarks>
            <p>
            Can return <see langword="null"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Target.HotSwappableTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="true"/> if the target source is static.
            </value>
        </member>
        <member name="T:Spring.Aop.Target.IThreadLocalTargetSourceStats">
            <summary>
            Statistics for a thread local <see cref="T:Spring.Aop.ITargetSource"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="P:Spring.Aop.Target.IThreadLocalTargetSourceStats.Invocations">
            <summary>
            Gets the number of invocations of the
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)"/> methods.
            </summary>
            <value>
            The number of invocations of the
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)"/> methods.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.IThreadLocalTargetSourceStats.Hits">
            <summary>
            Gets the number of hits that were satisfied by a thread bound object.
            </summary>
            <value>
            The number of hits that were satisfied by a thread bound object.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.IThreadLocalTargetSourceStats.Objects">
            <summary>
            Gets the number of thread bound objects created.
            </summary>
            <value>The number of thread bound objects created.</value>
        </member>
        <member name="T:Spring.Aop.Target.PrototypeTargetSource">
            <summary>
            <see cref="T:Spring.Aop.ITargetSource"/> implementation that creates a
            new instance of the target object for each request.
            </summary>
            <remarks>
            <p>
            Can only be used in an object factory.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Spinazzi Federico (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $
            </version>
        </member>
        <member name="M:Spring.Aop.Target.PrototypeTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.PrototypeTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <remarks>
            <p>
            No-op implementation.
            </p>
            </remarks>
            <param name="target">The target object to release.</param>
        </member>
        <member name="P:Spring.Aop.Target.PrototypeTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="false"/> because this target source is never static.
            </value>
        </member>
        <member name="T:Spring.Aop.Target.SimplePoolTargetSource">
            <summary>
            Pooling target source implementation based on the
            <see cref="T:Spring.Pool.Support.SimplePool"/>
            </summary>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $
            </version>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.GetTarget">
            <summary>
            Returns the target object (acquired from the pool).
            </summary>
            <returns>
            The target object (acquired from the pool).
            </returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.CreatePool(Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates the pool.
            </summary>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, in
            case one needs collaborators from it (normally one's own properties
            are sufficient).
            </param>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.CreateObjectPool">
            <summary>
            Creates a new instance of an appropriate
            <see cref="T:Spring.Pool.IObjectPool"/> implementation.
            </summary>
            <remarks>
            <p>
            Subclasses can, of course, override this method if they want to
            return a different <see cref="T:Spring.Pool.IObjectPool"/> implementation.
            </p>
            </remarks>
            <returns>
            An empty <see cref="T:Spring.Pool.IObjectPool"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object (returns it to the pool).
            </summary>
            <param name="target">The target object to release (return to the pool).</param>
            <exception cref="T:System.Exception">
            In the case that the <paramref name="target"/> could not be released.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <remarks>
            <p>
            Disposes of the pool.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.MakeObject">
            <summary>
            Creates an instance that can be returned by the pool.
            </summary>
            <returns>
            An instance that can be returned by the pool.
            </returns>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.MakeObject"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.DestroyObject(System.Object)">
            <summary>
            Destroys an instance no longer needed by the pool.
            </summary>
            <param name="obj">The instance to be destroyed.</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.DestroyObject(System.Object)"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.ValidateObject(System.Object)">
            <summary>
            Ensures that the instance is safe to be returned by the pool.
            Returns false if this object should be destroyed.
            </summary>
            <param name="obj">The instance to validate.</param>
            <returns>
            <see langword="false"/> if this object is not valid and
            should be dropped from the pool, otherwise <see langword="true"/>.
            </returns>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.ValidateObject(System.Object)"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.ActivateObject(System.Object)">
            <summary>
            Reinitialize an instance to be returned by the pool.
            </summary>
            <param name="obj">The instance to be activated.</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.ActivateObject(System.Object)"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.PassivateObject(System.Object)">
            <summary>
            Passivates the object.
            </summary>
            <param name="obj">The instance returned to the pool.</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)"/>
        </member>
        <member name="P:Spring.Aop.Target.SimplePoolTargetSource.Active">
            <summary>
            The number of active object instances in this pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.SimplePoolTargetSource.Free">
            <summary>
            The number of free object instances in this pool.
            </summary>
        </member>
        <member name="T:Spring.Aop.Target.SingletonTargetSource">
            <summary>
            <see cref="T:Spring.Aop.ITargetSource"/> implementation that holds a local
            object.
            </summary>
            <remarks>
            <p>
            This is the default implementation of the
            <see cref="T:Spring.Aop.ITargetSource"/> interface used by the AOP
            framework. There should be no need to create objects of this class in
            application code.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.#ctor(System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.SingletonTargetSource"/>
            for the specified target object.
            </summary>
            <param name="target">The target object to expose.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="target"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <remarks>
            <p>
            No-op implementation.
            </p>
            </remarks>
            <param name="target">The target object to release.</param>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.ToString">
            <summary>
            Returns a stringified representation of this target source.
            </summary>
            <returns>
            A stringified representation of this target source.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.  
            </summary>
            <param name="other">The target source to compare with.</param>
            <returns>
            <see langword="true"/> if this instance is equal to the
            specified <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Aop.Target.SingletonTargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.SingletonTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="true"/> because this target source is always static.
            </value>
        </member>
        <member name="T:Spring.Aop.Target.ThreadLocalTargetSource">
            <summary>
            <see cref="T:Spring.Aop.ITargetSource"/> implementation that uses a
            threading model in which every thread has its own copy of the target.
            </summary>
            <remarks>
            <p>
            Alternative to an object pool.
            </p>
            <p>
            Application code is written as to a normal pool; callers can't assume
            they will be dealing with the same instance in invocations in different
            threads. However, state can be relied on during the operations of a
            single thread: for example, if one caller makes repeated calls on the
            AOP proxy.
            </p>
            <p>
            This class act both as an introduction and as an interceptor, so it 
            should be added twice, once as an introduction and once as an
            interceptor.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="F:Spring.Aop.Target.ThreadLocalTargetSource._targetInThread">
            <summary>
            ThreadLocal holding the target associated with the current thread.
            </summary>
            <remarks>
            <p>
            Unlike most thread local storage which is static, this variable is
            meant to be per thread per instance of this class.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Target.ThreadLocalTargetSource._targetSet">
            <summary>
            The set of managed targets, enabling us to keep track of the
            targets we've created.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <remarks>
            <p>
            Tries to locate the target from thread local storage. If no target
            is found, a target will be obtained and bound to the thread.
            </p>
            </remarks>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
            <seealso cref="M:Spring.Aop.Target.AbstractPrototypeTargetSource.NewPrototypeInstance"/>
        </member>
        <member name="M:Spring.Aop.Target.ThreadLocalTargetSource.GetStatsMixin">
            <summary>
            Return an introduction advisor mixin that allows the AOP proxy to be
            cast to an <see cref="T:Spring.Aop.Target.IThreadLocalTargetSourceStats"/> reference.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.ThreadLocalTargetSource.Dispose">
            <summary>
            Cleans up this instance's thread storage, and disposes of any
            <see cref="T:System.IDisposable"/> targets as necessary.
            </summary>
            <seealso cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Increments Invocations and Hits statistics
            </summary>
            <param name="invocation">The method invocation joinpoint</param>
            <returns>The result of the call to IJoinpoint.Proceed(), might be intercepted by the interceptor.</returns>
            <exception cref="T:System.Exception">if the interceptors or the target-object throws an exception.</exception>
        </member>
        <member name="P:Spring.Aop.Target.ThreadLocalTargetSource.Invocations">
            <summary>
            Gets the number of invocations of the <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)"/> methods.
            </summary>
            <value>
            The number of invocations of the <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)"/> methods.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.ThreadLocalTargetSource.Hits">
            <summary>
            Gets the number of hits that were satisfied by a thread bound object.
            </summary>
            <value>
            The number of hits that were satisfied by a thread bound object.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.ThreadLocalTargetSource.Objects">
            <summary>
            Gets the number of thread bound objects created.
            </summary>
            <value>The number of thread bound objects created.</value>
        </member>
        <member name="T:Spring.Aop.IAfterReturningAdvice">
            <summary>
            Advice that executes after a method returns <b>successfully</b>.
            </summary>
            <remarks>
            <p>
            <i>After</i> returning advice is invoked only on a normal method
            return, but <b>not</b> if an exception is thrown. Such advice can see
            the return value of the advised method invocation, but cannot change it.
            </p>
            <p>
            Possible uses for this type of advice would include performing access
            control checks on the return value of an advised method invocation, the
            ubiquitous logging of method invocation return values (useful during
            development), etc.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IMethodBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.IAfterReturningAdvice.AfterReturning(System.Object,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            Executes after <paramref name="target"/> <paramref name="method"/>
            returns <b>successfully</b>.
            </summary>
            <remarks>
            <p>
            Note that the supplied <paramref name="returnValue"/> <b>cannot</b>
            be changed by this type of advice... use the around advice type
            (<see cref="T:AopAlliance.Intercept.IMethodInterceptor"/>) if you
            need to change the return value of an advised method invocation.
            The data encapsulated by the supplied <paramref name="returnValue"/>
            can of course be modified though.
            </p>
            </remarks>
            <param name="returnValue">
            The value returned by the <paramref name="target"/>.
            </param>
            <param name="method">The intecepted method.</param>
            <param name="args">The intercepted method's arguments.</param>
            <param name="target">The target object.</param>
            <seealso cref="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)"/>
        </member>
        <member name="T:Spring.Aop.IBeforeAdvice">
            <summary>
            Superinterface for all before advice.
            </summary>
            <remarks>
            <p>
            <i>Before</i> advice is advice that executes before a joinpoint, but
            which does not have the ability to prevent execution flow proceeding to
            the joinpoint (unless it throws an <see cref="T:System.Exception"/>).
            </p>
            <p>
            Spring.NET only supports <i>method</i> before advice. Although this
            is unlikely to change, this API is designed to allow <i>field</i>
            before advice in future if desired.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IMethodBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IAfterReturningAdvice"/>
            <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.IIntroductionInterceptor">
            <summary> 
            Subinterface of the AOP Alliance
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> interface that
            allows additional interfaces to be implemented by the interceptor, and
            available via a proxy using that interceptor.
            </summary>
            <remarks>
            <p>
            This is a fundamental AOP concept called <b>introduction</b>.
            </p>
            <p>
            Introductions are often <b>mixins</b>, enabling the building of composite
            objects that can achieve many of the goals of multiple inheritance.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.IIntroductionInterceptor.ImplementsInterface(System.Type)">
            <summary>
            Does this <see cref="T:Spring.Aop.IIntroductionInterceptor"/>
            implement the given interface?
            </summary>
            <param name="intf">The interface to check.</param>
            <returns>
            <see langword="true"/> if this
            <see cref="T:Spring.Aop.IIntroductionInterceptor"/>
            implements the given interface.
            </returns>
        </member>
        <member name="T:Spring.Aop.IMethodBeforeAdvice">
            <summary>
            Advice executed before a method is invoked.
            </summary>
            <remarks>
            <p>
            Such advice cannot prevent the method call proceeding, short of
            throwing an <see cref="T:System.Exception"/>.
            </p>
            <p>
            The main advantage of <c>before</c> advice is that there is no
            possibility of inadvertently failing to proceed down the interceptor
            chain, since there is no need (and indeed means) to invoke the next
            interceptor in the call chain.
            </p>
            <p>
            Possible uses for this type of advice would include performing class
            invariant checks prior to the actual method invocation, the ubiquitous
            logging of method invocations (useful during development), etc.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IAfterReturningAdvice"/>
            <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:Spring.Aop.IMethodBeforeAdvice.Before(System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            The callback before a given method is invoked.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="args">The arguments to the method.</param>
            <param name="target">
            The target of the method invocation. May be <see langword="null"/>.
            </param>
            <exception cref="T:System.Exception">
            Thrown when and if this object wishes to abort the call. Any
            exception so thrown will be propagated to the caller.
            </exception>
        </member>
        <member name="T:Spring.Aop.IThrowsAdvice">
            <summary> 
            Simple marker interface for throws advice.
            </summary>
            <remarks>
            <p>
            There are no methods on this interface, as methods are discovered and
            invoked via reflection. Please do see read the API documentation for the
            <see cref="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor"/> class;
            said documention describes in detail the signature of the methods that
            implementations of the <see cref="T:Spring.Aop.IThrowsAdvice"/> interface
            must adhere to in the specific case of Spring.NET's implementation of
            throws advice.
            </p>
            <p>
            There are any number of possible uses for this type of advice. Some
            examples would include the ubiquitous logging of any such exceptions,
            monitoring the number and type of exceptions and sending emails to
            a support desk once certain criteria have been met, wrapping generic
            exceptions such as <see cref="T:System.Data.SqlClient.SqlException"/> in
            exceptions that are more meaningful to your business logic, etc.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IMethodBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IAfterReturningAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="T:Spring.Aop.TrueMethodMatcher">
            <summary>
            Canonical <see cref="T:Spring.Aop.IMethodMatcher"/> that matches
            <b>all</b> methods.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="F:Spring.Aop.TrueMethodMatcher.True">
            <summary>
            Canonical instance that matches <b>all</b> methods.
            </summary>
            <remarks>
            <p>
            It is not dynamic.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.TrueMethodMatcher"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            Perform static checking. If this returns false, or if the isRuntime() method
            returns false, no runtime check will be made.
            </summary>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target class (may be <see langword="null"/>, in which case the
            candidate class must be taken to be the <paramref name="method"/>'s
            declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <param name="method">The candidate method.</param>
            <param name="targetType">The target class.</param>
            <param name="args">The arguments to the method</param>
            <returns>
            <see langword="true"/> if there is a runtime match.</returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Aop.TrueMethodMatcher.IsRuntime">
            <summary>
            Is this <see cref="T:Spring.Aop.IMethodMatcher"/> dynamic?
            </summary>
            <value>
            <see langword="true"/> if this
            <see cref="T:Spring.Aop.IMethodMatcher"/> is dynamic.
            </value>
            <seealso cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/>
        </member>
        <member name="T:Spring.Aop.TruePointcut">
            <summary>
            Canonical <see cref="T:Spring.Aop.IPointcut"/> instance that matches
            everything.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="F:Spring.Aop.TruePointcut.True">
            <summary>
            Canonical instance that matches everything.
            </summary>
        </member>
        <member name="M:Spring.Aop.TruePointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.TruePointcut"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.TruePointcut.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.IPointcut"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.IPointcut"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.TruePointcut.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Aop.TruePointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.TruePointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.TrueTypeFilter">
            <summary>
            Canonical <see cref="T:Spring.Aop.ITypeFilter"/> instances.
            </summary>
            <remarks>
            <p>
            Only one canonical <see cref="T:Spring.Aop.ITypeFilter"/> instance is
            provided out of the box. The <see cref="F:Spring.Aop.TrueTypeFilter.True"/>
            <see cref="T:Spring.Aop.ITypeFilter"/> matches all classes.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="F:Spring.Aop.TrueTypeFilter.True">
            <summary>
            Canonical <see cref="T:Spring.Aop.ITypeFilter"/> instance that
            matches all classes.
            </summary>
        </member>
        <member name="M:Spring.Aop.TrueTypeFilter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.TrueTypeFilter"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.TrueTypeFilter.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
            <seealso cref="M:Spring.Aop.ITypeFilter.Matches(System.Type)"/>
        </member>
        <member name="M:Spring.Aop.TrueTypeFilter.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.ITypeFilter"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.ITypeFilter"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.TrueTypeFilter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="T:AopAlliance.Aop.AspectException">
            <summary>
            Superclass for all AOP infrastructure exceptions.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: Spring.Aop.xml,v 1.1 2006/11/01 08:47:46 yuzx Exp $</version>
        </member>
        <member name="M:AopAlliance.Aop.AspectException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:AopAlliance.Aop.AspectException"/> class.
            </summary>
        </member>
        <member name="M:AopAlliance.Aop.AspectException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:AopAlliance.Aop.AspectException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:AopAlliance.Aop.AspectException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:AopAlliance.Aop.AspectException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="innerException">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:AopAlliance.Aop.AspectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:AopAlliance.Aop.AspectException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:AopAlliance.Intercept.IConstructorInterceptor">
            <summary>
            Intercepts the construction of a new object.
            </summary>
            <remarks>
            <p>
            Such interceptions are nested "on top" of the target.
            </p>
            </remarks>
        </member>
        <member name="M:AopAlliance.Intercept.IConstructorInterceptor.Construct(AopAlliance.Intercept.IConstructorInvocation)">
            <summary>
            Implement this method to perform extra treatments before and after
            the consruction of a new object.
            </summary>
            <remarks>
            <p>
            Polite implementations would certainly like to invoke
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>. 
            </p>
            </remarks>
            <param name="invocation">
            The constructor invocation that is being intercepted.
            </param>
            <returns>
            The newly created object, which is also the result of the call to
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>, and might be
            replaced by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="T:AopAlliance.Intercept.IConstructorInvocation">
            <summary>
            A description of an invocation to a constuctor, given to an interceptor
            upon constructor-call.
            </summary>
            <remarks>
            <p>
            A constructor invocation is a joinpoint and can be intercepted by a
            constructor interceptor.
            </p>
            </remarks>
            <seealso cref="T:AopAlliance.Intercept.IConstructorInterceptor"/>
        </member>
        <member name="P:AopAlliance.Intercept.IConstructorInvocation.Constructor">
            <summary>
            Gets the constructor invocation that is to be invoked.
            </summary>
            <remarks>
            <p>
            This property is a friendly implementation of the
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/> property.
            It should be used in preference to the
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/> property
            because it provides immediate access to the underlying constructor
            without the need to resort to a cast.
            </p>
            </remarks>
            <value>
            The constructor invocation that is to be invoked.
            </value>
        </member>
    </members>
</doc>
